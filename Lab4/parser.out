Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> { instructions }
Rule 7     instruction -> if
Rule 8     instruction -> if ;
Rule 9     instruction -> return
Rule 10    instruction -> return ;
Rule 11    instruction -> break
Rule 12    instruction -> break ;
Rule 13    instruction -> continue
Rule 14    instruction -> continue ;
Rule 15    instruction -> for_loop
Rule 16    instruction -> for_loop ;
Rule 17    instruction -> while_loop
Rule 18    instruction -> while_loop ;
Rule 19    instruction -> assignment
Rule 20    instruction -> assignment ;
Rule 21    instruction -> print
Rule 22    instruction -> print ;
Rule 23    if -> IF ( expression ) instruction
Rule 24    if -> IF ( expression ) instruction ELSE instruction
Rule 25    break -> BREAK
Rule 26    continue -> CONTINUE
Rule 27    while_loop -> WHILE ( expression ) instruction
Rule 28    for_loop -> FOR id = expression : expression instruction
Rule 29    return -> RETURN expression
Rule 30    return -> RETURN
Rule 31    print -> PRINT ( list_for_print )
Rule 32    print -> PRINT list_for_print
Rule 33    list_for_print -> expression , list_for_print
Rule 34    list_for_print -> expression
Rule 35    expression -> var
Rule 36    expression -> ( expression )
Rule 37    expression -> int
Rule 38    expression -> float
Rule 39    expression -> string
Rule 40    int -> INTNUM
Rule 41    float -> FLOATNUM
Rule 42    string -> STRING
Rule 43    var -> id
Rule 44    id -> ID
Rule 45    var -> id [ mat_func_args ]
Rule 46    assignment -> var = expression
Rule 47    assignment -> var ADDASSIGN expression
Rule 48    assignment -> var SUBASSIGN expression
Rule 49    assignment -> var MULASSIGN expression
Rule 50    assignment -> var DIVASSIGN expression
Rule 51    expression -> expression '
Rule 52    expression -> - expression
Rule 53    expression -> expression + expression
Rule 54    expression -> expression - expression
Rule 55    expression -> expression * expression
Rule 56    expression -> expression / expression
Rule 57    expression -> expression DOTADD expression
Rule 58    expression -> expression DOTSUB expression
Rule 59    expression -> expression DOTMUL expression
Rule 60    expression -> expression DOTDIV expression
Rule 61    expression -> expression < expression
Rule 62    expression -> expression > expression
Rule 63    expression -> expression LESSEQ expression
Rule 64    expression -> expression MOREEQ expression
Rule 65    expression -> expression EQUAL expression
Rule 66    expression -> expression NOTEQUAL expression
Rule 67    expression -> matrix
Rule 68    matrix -> [ matrix ]
Rule 69    matrix -> [ sub_string_1 ]
Rule 70    matrix -> [ sub_string_1 , matrix ]
Rule 71    sub_string_1 -> sub_string_1 , expression
Rule 72    sub_string_1 -> expression
Rule 73    expression -> matrix_creation ( mat_func_args )
Rule 74    mat_func_args -> mat_func_args , expression
Rule 75    mat_func_args -> expression
Rule 76    matrix_creation -> ZEROS
Rule 77    matrix_creation -> ONES
Rule 78    matrix_creation -> EYE

Terminals, with rules where they appear

'                    : 51
(                    : 23 24 27 31 36 73
)                    : 23 24 27 31 36 73
*                    : 55
+                    : 53
,                    : 33 70 71 74
-                    : 52 54
/                    : 56
:                    : 28
;                    : 8 10 12 14 16 18 20 22
<                    : 61
=                    : 28 46
>                    : 62
ADDASSIGN            : 47
BREAK                : 25
CONTINUE             : 26
DIVASSIGN            : 50
DOTADD               : 57
DOTDIV               : 60
DOTMUL               : 59
DOTSUB               : 58
ELSE                 : 24
EQUAL                : 65
EYE                  : 78
FLOATNUM             : 41
FOR                  : 28
ID                   : 44
IF                   : 23 24
INTNUM               : 40
LESSEQ               : 63
MOREEQ               : 64
MULASSIGN            : 49
NOTEQUAL             : 66
ONES                 : 77
PRINT                : 31 32
RETURN               : 29 30
STRING               : 42
SUBASSIGN            : 48
WHILE                : 27
ZEROS                : 76
[                    : 45 68 69 70
]                    : 45 68 69 70
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

assignment           : 19 20
break                : 11 12
continue             : 13 14
expression           : 23 24 27 28 28 29 33 34 36 46 47 48 49 50 51 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 71 72 74 75
float                : 38
for_loop             : 15 16
id                   : 28 43 45
if                   : 7 8
instruction          : 4 5 23 24 24 27 28
instructions         : 2 4 6
instructions_opt     : 1
int                  : 37
list_for_print       : 31 32 33
mat_func_args        : 45 73 74
matrix               : 67 68 70
matrix_creation      : 73
print                : 21 22
program              : 0
return               : 9 10
string               : 39
sub_string_1         : 69 70 71
var                  : 35 46 47 48 49 50
while_loop           : 17 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    $end            reduce using rule 3 (instructions_opt -> .)
    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 24
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 4

    (5) instructions -> instruction .

    {               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    instructions                   shift and go to state 25
    instruction                    shift and go to state 4
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 6

    (7) instruction -> if .
    (8) instruction -> if . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 7 (instruction -> if .)
    IF              reduce using rule 7 (instruction -> if .)
    RETURN          reduce using rule 7 (instruction -> if .)
    BREAK           reduce using rule 7 (instruction -> if .)
    CONTINUE        reduce using rule 7 (instruction -> if .)
    FOR             reduce using rule 7 (instruction -> if .)
    WHILE           reduce using rule 7 (instruction -> if .)
    PRINT           reduce using rule 7 (instruction -> if .)
    ID              reduce using rule 7 (instruction -> if .)
    $end            reduce using rule 7 (instruction -> if .)
    }               reduce using rule 7 (instruction -> if .)
    ELSE            reduce using rule 7 (instruction -> if .)
    ;               shift and go to state 26

  ! ;               [ reduce using rule 7 (instruction -> if .) ]


state 7

    (9) instruction -> return .
    (10) instruction -> return . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 9 (instruction -> return .)
    IF              reduce using rule 9 (instruction -> return .)
    RETURN          reduce using rule 9 (instruction -> return .)
    BREAK           reduce using rule 9 (instruction -> return .)
    CONTINUE        reduce using rule 9 (instruction -> return .)
    FOR             reduce using rule 9 (instruction -> return .)
    WHILE           reduce using rule 9 (instruction -> return .)
    PRINT           reduce using rule 9 (instruction -> return .)
    ID              reduce using rule 9 (instruction -> return .)
    $end            reduce using rule 9 (instruction -> return .)
    }               reduce using rule 9 (instruction -> return .)
    ELSE            reduce using rule 9 (instruction -> return .)
    ;               shift and go to state 27

  ! ;               [ reduce using rule 9 (instruction -> return .) ]


state 8

    (11) instruction -> break .
    (12) instruction -> break . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 11 (instruction -> break .)
    IF              reduce using rule 11 (instruction -> break .)
    RETURN          reduce using rule 11 (instruction -> break .)
    BREAK           reduce using rule 11 (instruction -> break .)
    CONTINUE        reduce using rule 11 (instruction -> break .)
    FOR             reduce using rule 11 (instruction -> break .)
    WHILE           reduce using rule 11 (instruction -> break .)
    PRINT           reduce using rule 11 (instruction -> break .)
    ID              reduce using rule 11 (instruction -> break .)
    $end            reduce using rule 11 (instruction -> break .)
    }               reduce using rule 11 (instruction -> break .)
    ELSE            reduce using rule 11 (instruction -> break .)
    ;               shift and go to state 28

  ! ;               [ reduce using rule 11 (instruction -> break .) ]


state 9

    (13) instruction -> continue .
    (14) instruction -> continue . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 13 (instruction -> continue .)
    IF              reduce using rule 13 (instruction -> continue .)
    RETURN          reduce using rule 13 (instruction -> continue .)
    BREAK           reduce using rule 13 (instruction -> continue .)
    CONTINUE        reduce using rule 13 (instruction -> continue .)
    FOR             reduce using rule 13 (instruction -> continue .)
    WHILE           reduce using rule 13 (instruction -> continue .)
    PRINT           reduce using rule 13 (instruction -> continue .)
    ID              reduce using rule 13 (instruction -> continue .)
    $end            reduce using rule 13 (instruction -> continue .)
    }               reduce using rule 13 (instruction -> continue .)
    ELSE            reduce using rule 13 (instruction -> continue .)
    ;               shift and go to state 29

  ! ;               [ reduce using rule 13 (instruction -> continue .) ]


state 10

    (15) instruction -> for_loop .
    (16) instruction -> for_loop . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 15 (instruction -> for_loop .)
    IF              reduce using rule 15 (instruction -> for_loop .)
    RETURN          reduce using rule 15 (instruction -> for_loop .)
    BREAK           reduce using rule 15 (instruction -> for_loop .)
    CONTINUE        reduce using rule 15 (instruction -> for_loop .)
    FOR             reduce using rule 15 (instruction -> for_loop .)
    WHILE           reduce using rule 15 (instruction -> for_loop .)
    PRINT           reduce using rule 15 (instruction -> for_loop .)
    ID              reduce using rule 15 (instruction -> for_loop .)
    $end            reduce using rule 15 (instruction -> for_loop .)
    }               reduce using rule 15 (instruction -> for_loop .)
    ELSE            reduce using rule 15 (instruction -> for_loop .)
    ;               shift and go to state 30

  ! ;               [ reduce using rule 15 (instruction -> for_loop .) ]


state 11

    (17) instruction -> while_loop .
    (18) instruction -> while_loop . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 17 (instruction -> while_loop .)
    IF              reduce using rule 17 (instruction -> while_loop .)
    RETURN          reduce using rule 17 (instruction -> while_loop .)
    BREAK           reduce using rule 17 (instruction -> while_loop .)
    CONTINUE        reduce using rule 17 (instruction -> while_loop .)
    FOR             reduce using rule 17 (instruction -> while_loop .)
    WHILE           reduce using rule 17 (instruction -> while_loop .)
    PRINT           reduce using rule 17 (instruction -> while_loop .)
    ID              reduce using rule 17 (instruction -> while_loop .)
    $end            reduce using rule 17 (instruction -> while_loop .)
    }               reduce using rule 17 (instruction -> while_loop .)
    ELSE            reduce using rule 17 (instruction -> while_loop .)
    ;               shift and go to state 31

  ! ;               [ reduce using rule 17 (instruction -> while_loop .) ]


state 12

    (19) instruction -> assignment .
    (20) instruction -> assignment . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 19 (instruction -> assignment .)
    IF              reduce using rule 19 (instruction -> assignment .)
    RETURN          reduce using rule 19 (instruction -> assignment .)
    BREAK           reduce using rule 19 (instruction -> assignment .)
    CONTINUE        reduce using rule 19 (instruction -> assignment .)
    FOR             reduce using rule 19 (instruction -> assignment .)
    WHILE           reduce using rule 19 (instruction -> assignment .)
    PRINT           reduce using rule 19 (instruction -> assignment .)
    ID              reduce using rule 19 (instruction -> assignment .)
    $end            reduce using rule 19 (instruction -> assignment .)
    }               reduce using rule 19 (instruction -> assignment .)
    ELSE            reduce using rule 19 (instruction -> assignment .)
    ;               shift and go to state 32

  ! ;               [ reduce using rule 19 (instruction -> assignment .) ]


state 13

    (21) instruction -> print .
    (22) instruction -> print . ;

  ! shift/reduce conflict for ; resolved as shift
    {               reduce using rule 21 (instruction -> print .)
    IF              reduce using rule 21 (instruction -> print .)
    RETURN          reduce using rule 21 (instruction -> print .)
    BREAK           reduce using rule 21 (instruction -> print .)
    CONTINUE        reduce using rule 21 (instruction -> print .)
    FOR             reduce using rule 21 (instruction -> print .)
    WHILE           reduce using rule 21 (instruction -> print .)
    PRINT           reduce using rule 21 (instruction -> print .)
    ID              reduce using rule 21 (instruction -> print .)
    $end            reduce using rule 21 (instruction -> print .)
    }               reduce using rule 21 (instruction -> print .)
    ELSE            reduce using rule 21 (instruction -> print .)
    ;               shift and go to state 33

  ! ;               [ reduce using rule 21 (instruction -> print .) ]


state 14

    (23) if -> IF . ( expression ) instruction
    (24) if -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 34


state 15

    (29) return -> RETURN . expression
    (30) return -> RETURN .
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

  ! shift/reduce conflict for ID resolved as shift
    ;               reduce using rule 30 (return -> RETURN .)
    {               reduce using rule 30 (return -> RETURN .)
    IF              reduce using rule 30 (return -> RETURN .)
    RETURN          reduce using rule 30 (return -> RETURN .)
    BREAK           reduce using rule 30 (return -> RETURN .)
    CONTINUE        reduce using rule 30 (return -> RETURN .)
    FOR             reduce using rule 30 (return -> RETURN .)
    WHILE           reduce using rule 30 (return -> RETURN .)
    PRINT           reduce using rule 30 (return -> RETURN .)
    $end            reduce using rule 30 (return -> RETURN .)
    }               reduce using rule 30 (return -> RETURN .)
    ELSE            reduce using rule 30 (return -> RETURN .)
    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

  ! ID              [ reduce using rule 30 (return -> RETURN .) ]

    expression                     shift and go to state 35
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 16

    (25) break -> BREAK .

    ;               reduce using rule 25 (break -> BREAK .)
    {               reduce using rule 25 (break -> BREAK .)
    IF              reduce using rule 25 (break -> BREAK .)
    RETURN          reduce using rule 25 (break -> BREAK .)
    BREAK           reduce using rule 25 (break -> BREAK .)
    CONTINUE        reduce using rule 25 (break -> BREAK .)
    FOR             reduce using rule 25 (break -> BREAK .)
    WHILE           reduce using rule 25 (break -> BREAK .)
    PRINT           reduce using rule 25 (break -> BREAK .)
    ID              reduce using rule 25 (break -> BREAK .)
    $end            reduce using rule 25 (break -> BREAK .)
    }               reduce using rule 25 (break -> BREAK .)
    ELSE            reduce using rule 25 (break -> BREAK .)


state 17

    (26) continue -> CONTINUE .

    ;               reduce using rule 26 (continue -> CONTINUE .)
    {               reduce using rule 26 (continue -> CONTINUE .)
    IF              reduce using rule 26 (continue -> CONTINUE .)
    RETURN          reduce using rule 26 (continue -> CONTINUE .)
    BREAK           reduce using rule 26 (continue -> CONTINUE .)
    CONTINUE        reduce using rule 26 (continue -> CONTINUE .)
    FOR             reduce using rule 26 (continue -> CONTINUE .)
    WHILE           reduce using rule 26 (continue -> CONTINUE .)
    PRINT           reduce using rule 26 (continue -> CONTINUE .)
    ID              reduce using rule 26 (continue -> CONTINUE .)
    $end            reduce using rule 26 (continue -> CONTINUE .)
    }               reduce using rule 26 (continue -> CONTINUE .)
    ELSE            reduce using rule 26 (continue -> CONTINUE .)


state 18

    (28) for_loop -> FOR . id = expression : expression instruction
    (44) id -> . ID

    ID              shift and go to state 23

    id                             shift and go to state 51

state 19

    (43) var -> id .
    (45) var -> id . [ mat_func_args ]

    =               reduce using rule 43 (var -> id .)
    ADDASSIGN       reduce using rule 43 (var -> id .)
    SUBASSIGN       reduce using rule 43 (var -> id .)
    MULASSIGN       reduce using rule 43 (var -> id .)
    DIVASSIGN       reduce using rule 43 (var -> id .)
    '               reduce using rule 43 (var -> id .)
    +               reduce using rule 43 (var -> id .)
    -               reduce using rule 43 (var -> id .)
    *               reduce using rule 43 (var -> id .)
    /               reduce using rule 43 (var -> id .)
    DOTADD          reduce using rule 43 (var -> id .)
    DOTSUB          reduce using rule 43 (var -> id .)
    DOTMUL          reduce using rule 43 (var -> id .)
    DOTDIV          reduce using rule 43 (var -> id .)
    <               reduce using rule 43 (var -> id .)
    >               reduce using rule 43 (var -> id .)
    LESSEQ          reduce using rule 43 (var -> id .)
    MOREEQ          reduce using rule 43 (var -> id .)
    EQUAL           reduce using rule 43 (var -> id .)
    NOTEQUAL        reduce using rule 43 (var -> id .)
    ;               reduce using rule 43 (var -> id .)
    {               reduce using rule 43 (var -> id .)
    IF              reduce using rule 43 (var -> id .)
    RETURN          reduce using rule 43 (var -> id .)
    BREAK           reduce using rule 43 (var -> id .)
    CONTINUE        reduce using rule 43 (var -> id .)
    FOR             reduce using rule 43 (var -> id .)
    WHILE           reduce using rule 43 (var -> id .)
    PRINT           reduce using rule 43 (var -> id .)
    ID              reduce using rule 43 (var -> id .)
    $end            reduce using rule 43 (var -> id .)
    }               reduce using rule 43 (var -> id .)
    ELSE            reduce using rule 43 (var -> id .)
    ,               reduce using rule 43 (var -> id .)
    )               reduce using rule 43 (var -> id .)
    ]               reduce using rule 43 (var -> id .)
    :               reduce using rule 43 (var -> id .)
    [               shift and go to state 52


state 20

    (27) while_loop -> WHILE . ( expression ) instruction

    (               shift and go to state 53


state 21

    (46) assignment -> var . = expression
    (47) assignment -> var . ADDASSIGN expression
    (48) assignment -> var . SUBASSIGN expression
    (49) assignment -> var . MULASSIGN expression
    (50) assignment -> var . DIVASSIGN expression

    =               shift and go to state 54
    ADDASSIGN       shift and go to state 55
    SUBASSIGN       shift and go to state 56
    MULASSIGN       shift and go to state 57
    DIVASSIGN       shift and go to state 58


state 22

    (31) print -> PRINT . ( list_for_print )
    (32) print -> PRINT . list_for_print
    (33) list_for_print -> . expression , list_for_print
    (34) list_for_print -> . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 59
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    list_for_print                 shift and go to state 60
    expression                     shift and go to state 61
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 23

    (44) id -> ID .

    [               reduce using rule 44 (id -> ID .)
    =               reduce using rule 44 (id -> ID .)
    ADDASSIGN       reduce using rule 44 (id -> ID .)
    SUBASSIGN       reduce using rule 44 (id -> ID .)
    MULASSIGN       reduce using rule 44 (id -> ID .)
    DIVASSIGN       reduce using rule 44 (id -> ID .)
    '               reduce using rule 44 (id -> ID .)
    +               reduce using rule 44 (id -> ID .)
    -               reduce using rule 44 (id -> ID .)
    *               reduce using rule 44 (id -> ID .)
    /               reduce using rule 44 (id -> ID .)
    DOTADD          reduce using rule 44 (id -> ID .)
    DOTSUB          reduce using rule 44 (id -> ID .)
    DOTMUL          reduce using rule 44 (id -> ID .)
    DOTDIV          reduce using rule 44 (id -> ID .)
    <               reduce using rule 44 (id -> ID .)
    >               reduce using rule 44 (id -> ID .)
    LESSEQ          reduce using rule 44 (id -> ID .)
    MOREEQ          reduce using rule 44 (id -> ID .)
    EQUAL           reduce using rule 44 (id -> ID .)
    NOTEQUAL        reduce using rule 44 (id -> ID .)
    ;               reduce using rule 44 (id -> ID .)
    {               reduce using rule 44 (id -> ID .)
    IF              reduce using rule 44 (id -> ID .)
    RETURN          reduce using rule 44 (id -> ID .)
    BREAK           reduce using rule 44 (id -> ID .)
    CONTINUE        reduce using rule 44 (id -> ID .)
    FOR             reduce using rule 44 (id -> ID .)
    WHILE           reduce using rule 44 (id -> ID .)
    PRINT           reduce using rule 44 (id -> ID .)
    ID              reduce using rule 44 (id -> ID .)
    $end            reduce using rule 44 (id -> ID .)
    }               reduce using rule 44 (id -> ID .)
    ELSE            reduce using rule 44 (id -> ID .)
    ,               reduce using rule 44 (id -> ID .)
    )               reduce using rule 44 (id -> ID .)
    ]               reduce using rule 44 (id -> ID .)
    :               reduce using rule 44 (id -> ID .)


state 24

    (4) instructions -> instructions instruction .

    {               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 25

    (6) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    }               shift and go to state 62
    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 24
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 26

    (8) instruction -> if ; .

    {               reduce using rule 8 (instruction -> if ; .)
    IF              reduce using rule 8 (instruction -> if ; .)
    RETURN          reduce using rule 8 (instruction -> if ; .)
    BREAK           reduce using rule 8 (instruction -> if ; .)
    CONTINUE        reduce using rule 8 (instruction -> if ; .)
    FOR             reduce using rule 8 (instruction -> if ; .)
    WHILE           reduce using rule 8 (instruction -> if ; .)
    PRINT           reduce using rule 8 (instruction -> if ; .)
    ID              reduce using rule 8 (instruction -> if ; .)
    $end            reduce using rule 8 (instruction -> if ; .)
    }               reduce using rule 8 (instruction -> if ; .)
    ELSE            reduce using rule 8 (instruction -> if ; .)
    ;               reduce using rule 8 (instruction -> if ; .)


state 27

    (10) instruction -> return ; .

    {               reduce using rule 10 (instruction -> return ; .)
    IF              reduce using rule 10 (instruction -> return ; .)
    RETURN          reduce using rule 10 (instruction -> return ; .)
    BREAK           reduce using rule 10 (instruction -> return ; .)
    CONTINUE        reduce using rule 10 (instruction -> return ; .)
    FOR             reduce using rule 10 (instruction -> return ; .)
    WHILE           reduce using rule 10 (instruction -> return ; .)
    PRINT           reduce using rule 10 (instruction -> return ; .)
    ID              reduce using rule 10 (instruction -> return ; .)
    $end            reduce using rule 10 (instruction -> return ; .)
    }               reduce using rule 10 (instruction -> return ; .)
    ELSE            reduce using rule 10 (instruction -> return ; .)
    ;               reduce using rule 10 (instruction -> return ; .)


state 28

    (12) instruction -> break ; .

    {               reduce using rule 12 (instruction -> break ; .)
    IF              reduce using rule 12 (instruction -> break ; .)
    RETURN          reduce using rule 12 (instruction -> break ; .)
    BREAK           reduce using rule 12 (instruction -> break ; .)
    CONTINUE        reduce using rule 12 (instruction -> break ; .)
    FOR             reduce using rule 12 (instruction -> break ; .)
    WHILE           reduce using rule 12 (instruction -> break ; .)
    PRINT           reduce using rule 12 (instruction -> break ; .)
    ID              reduce using rule 12 (instruction -> break ; .)
    $end            reduce using rule 12 (instruction -> break ; .)
    }               reduce using rule 12 (instruction -> break ; .)
    ELSE            reduce using rule 12 (instruction -> break ; .)
    ;               reduce using rule 12 (instruction -> break ; .)


state 29

    (14) instruction -> continue ; .

    {               reduce using rule 14 (instruction -> continue ; .)
    IF              reduce using rule 14 (instruction -> continue ; .)
    RETURN          reduce using rule 14 (instruction -> continue ; .)
    BREAK           reduce using rule 14 (instruction -> continue ; .)
    CONTINUE        reduce using rule 14 (instruction -> continue ; .)
    FOR             reduce using rule 14 (instruction -> continue ; .)
    WHILE           reduce using rule 14 (instruction -> continue ; .)
    PRINT           reduce using rule 14 (instruction -> continue ; .)
    ID              reduce using rule 14 (instruction -> continue ; .)
    $end            reduce using rule 14 (instruction -> continue ; .)
    }               reduce using rule 14 (instruction -> continue ; .)
    ELSE            reduce using rule 14 (instruction -> continue ; .)
    ;               reduce using rule 14 (instruction -> continue ; .)


state 30

    (16) instruction -> for_loop ; .

    {               reduce using rule 16 (instruction -> for_loop ; .)
    IF              reduce using rule 16 (instruction -> for_loop ; .)
    RETURN          reduce using rule 16 (instruction -> for_loop ; .)
    BREAK           reduce using rule 16 (instruction -> for_loop ; .)
    CONTINUE        reduce using rule 16 (instruction -> for_loop ; .)
    FOR             reduce using rule 16 (instruction -> for_loop ; .)
    WHILE           reduce using rule 16 (instruction -> for_loop ; .)
    PRINT           reduce using rule 16 (instruction -> for_loop ; .)
    ID              reduce using rule 16 (instruction -> for_loop ; .)
    $end            reduce using rule 16 (instruction -> for_loop ; .)
    }               reduce using rule 16 (instruction -> for_loop ; .)
    ELSE            reduce using rule 16 (instruction -> for_loop ; .)
    ;               reduce using rule 16 (instruction -> for_loop ; .)


state 31

    (18) instruction -> while_loop ; .

    {               reduce using rule 18 (instruction -> while_loop ; .)
    IF              reduce using rule 18 (instruction -> while_loop ; .)
    RETURN          reduce using rule 18 (instruction -> while_loop ; .)
    BREAK           reduce using rule 18 (instruction -> while_loop ; .)
    CONTINUE        reduce using rule 18 (instruction -> while_loop ; .)
    FOR             reduce using rule 18 (instruction -> while_loop ; .)
    WHILE           reduce using rule 18 (instruction -> while_loop ; .)
    PRINT           reduce using rule 18 (instruction -> while_loop ; .)
    ID              reduce using rule 18 (instruction -> while_loop ; .)
    $end            reduce using rule 18 (instruction -> while_loop ; .)
    }               reduce using rule 18 (instruction -> while_loop ; .)
    ELSE            reduce using rule 18 (instruction -> while_loop ; .)
    ;               reduce using rule 18 (instruction -> while_loop ; .)


state 32

    (20) instruction -> assignment ; .

    {               reduce using rule 20 (instruction -> assignment ; .)
    IF              reduce using rule 20 (instruction -> assignment ; .)
    RETURN          reduce using rule 20 (instruction -> assignment ; .)
    BREAK           reduce using rule 20 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 20 (instruction -> assignment ; .)
    FOR             reduce using rule 20 (instruction -> assignment ; .)
    WHILE           reduce using rule 20 (instruction -> assignment ; .)
    PRINT           reduce using rule 20 (instruction -> assignment ; .)
    ID              reduce using rule 20 (instruction -> assignment ; .)
    $end            reduce using rule 20 (instruction -> assignment ; .)
    }               reduce using rule 20 (instruction -> assignment ; .)
    ELSE            reduce using rule 20 (instruction -> assignment ; .)
    ;               reduce using rule 20 (instruction -> assignment ; .)


state 33

    (22) instruction -> print ; .

    {               reduce using rule 22 (instruction -> print ; .)
    IF              reduce using rule 22 (instruction -> print ; .)
    RETURN          reduce using rule 22 (instruction -> print ; .)
    BREAK           reduce using rule 22 (instruction -> print ; .)
    CONTINUE        reduce using rule 22 (instruction -> print ; .)
    FOR             reduce using rule 22 (instruction -> print ; .)
    WHILE           reduce using rule 22 (instruction -> print ; .)
    PRINT           reduce using rule 22 (instruction -> print ; .)
    ID              reduce using rule 22 (instruction -> print ; .)
    $end            reduce using rule 22 (instruction -> print ; .)
    }               reduce using rule 22 (instruction -> print ; .)
    ELSE            reduce using rule 22 (instruction -> print ; .)
    ;               reduce using rule 22 (instruction -> print ; .)


state 34

    (23) if -> IF ( . expression ) instruction
    (24) if -> IF ( . expression ) instruction ELSE instruction
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 63
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 35

    (29) return -> RETURN expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ;               reduce using rule 29 (return -> RETURN expression .)
    {               reduce using rule 29 (return -> RETURN expression .)
    IF              reduce using rule 29 (return -> RETURN expression .)
    RETURN          reduce using rule 29 (return -> RETURN expression .)
    BREAK           reduce using rule 29 (return -> RETURN expression .)
    CONTINUE        reduce using rule 29 (return -> RETURN expression .)
    FOR             reduce using rule 29 (return -> RETURN expression .)
    WHILE           reduce using rule 29 (return -> RETURN expression .)
    PRINT           reduce using rule 29 (return -> RETURN expression .)
    ID              reduce using rule 29 (return -> RETURN expression .)
    $end            reduce using rule 29 (return -> RETURN expression .)
    }               reduce using rule 29 (return -> RETURN expression .)
    ELSE            reduce using rule 29 (return -> RETURN expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 36

    (35) expression -> var .

    '               reduce using rule 35 (expression -> var .)
    +               reduce using rule 35 (expression -> var .)
    -               reduce using rule 35 (expression -> var .)
    *               reduce using rule 35 (expression -> var .)
    /               reduce using rule 35 (expression -> var .)
    DOTADD          reduce using rule 35 (expression -> var .)
    DOTSUB          reduce using rule 35 (expression -> var .)
    DOTMUL          reduce using rule 35 (expression -> var .)
    DOTDIV          reduce using rule 35 (expression -> var .)
    <               reduce using rule 35 (expression -> var .)
    >               reduce using rule 35 (expression -> var .)
    LESSEQ          reduce using rule 35 (expression -> var .)
    MOREEQ          reduce using rule 35 (expression -> var .)
    EQUAL           reduce using rule 35 (expression -> var .)
    NOTEQUAL        reduce using rule 35 (expression -> var .)
    ;               reduce using rule 35 (expression -> var .)
    {               reduce using rule 35 (expression -> var .)
    IF              reduce using rule 35 (expression -> var .)
    RETURN          reduce using rule 35 (expression -> var .)
    BREAK           reduce using rule 35 (expression -> var .)
    CONTINUE        reduce using rule 35 (expression -> var .)
    FOR             reduce using rule 35 (expression -> var .)
    WHILE           reduce using rule 35 (expression -> var .)
    PRINT           reduce using rule 35 (expression -> var .)
    ID              reduce using rule 35 (expression -> var .)
    $end            reduce using rule 35 (expression -> var .)
    }               reduce using rule 35 (expression -> var .)
    ELSE            reduce using rule 35 (expression -> var .)
    ,               reduce using rule 35 (expression -> var .)
    )               reduce using rule 35 (expression -> var .)
    ]               reduce using rule 35 (expression -> var .)
    :               reduce using rule 35 (expression -> var .)


state 37

    (36) expression -> ( . expression )
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 79
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 38

    (37) expression -> int .

    '               reduce using rule 37 (expression -> int .)
    +               reduce using rule 37 (expression -> int .)
    -               reduce using rule 37 (expression -> int .)
    *               reduce using rule 37 (expression -> int .)
    /               reduce using rule 37 (expression -> int .)
    DOTADD          reduce using rule 37 (expression -> int .)
    DOTSUB          reduce using rule 37 (expression -> int .)
    DOTMUL          reduce using rule 37 (expression -> int .)
    DOTDIV          reduce using rule 37 (expression -> int .)
    <               reduce using rule 37 (expression -> int .)
    >               reduce using rule 37 (expression -> int .)
    LESSEQ          reduce using rule 37 (expression -> int .)
    MOREEQ          reduce using rule 37 (expression -> int .)
    EQUAL           reduce using rule 37 (expression -> int .)
    NOTEQUAL        reduce using rule 37 (expression -> int .)
    ;               reduce using rule 37 (expression -> int .)
    {               reduce using rule 37 (expression -> int .)
    IF              reduce using rule 37 (expression -> int .)
    RETURN          reduce using rule 37 (expression -> int .)
    BREAK           reduce using rule 37 (expression -> int .)
    CONTINUE        reduce using rule 37 (expression -> int .)
    FOR             reduce using rule 37 (expression -> int .)
    WHILE           reduce using rule 37 (expression -> int .)
    PRINT           reduce using rule 37 (expression -> int .)
    ID              reduce using rule 37 (expression -> int .)
    $end            reduce using rule 37 (expression -> int .)
    }               reduce using rule 37 (expression -> int .)
    ELSE            reduce using rule 37 (expression -> int .)
    ,               reduce using rule 37 (expression -> int .)
    )               reduce using rule 37 (expression -> int .)
    ]               reduce using rule 37 (expression -> int .)
    :               reduce using rule 37 (expression -> int .)


state 39

    (38) expression -> float .

    '               reduce using rule 38 (expression -> float .)
    +               reduce using rule 38 (expression -> float .)
    -               reduce using rule 38 (expression -> float .)
    *               reduce using rule 38 (expression -> float .)
    /               reduce using rule 38 (expression -> float .)
    DOTADD          reduce using rule 38 (expression -> float .)
    DOTSUB          reduce using rule 38 (expression -> float .)
    DOTMUL          reduce using rule 38 (expression -> float .)
    DOTDIV          reduce using rule 38 (expression -> float .)
    <               reduce using rule 38 (expression -> float .)
    >               reduce using rule 38 (expression -> float .)
    LESSEQ          reduce using rule 38 (expression -> float .)
    MOREEQ          reduce using rule 38 (expression -> float .)
    EQUAL           reduce using rule 38 (expression -> float .)
    NOTEQUAL        reduce using rule 38 (expression -> float .)
    ;               reduce using rule 38 (expression -> float .)
    {               reduce using rule 38 (expression -> float .)
    IF              reduce using rule 38 (expression -> float .)
    RETURN          reduce using rule 38 (expression -> float .)
    BREAK           reduce using rule 38 (expression -> float .)
    CONTINUE        reduce using rule 38 (expression -> float .)
    FOR             reduce using rule 38 (expression -> float .)
    WHILE           reduce using rule 38 (expression -> float .)
    PRINT           reduce using rule 38 (expression -> float .)
    ID              reduce using rule 38 (expression -> float .)
    $end            reduce using rule 38 (expression -> float .)
    }               reduce using rule 38 (expression -> float .)
    ELSE            reduce using rule 38 (expression -> float .)
    ,               reduce using rule 38 (expression -> float .)
    )               reduce using rule 38 (expression -> float .)
    ]               reduce using rule 38 (expression -> float .)
    :               reduce using rule 38 (expression -> float .)


state 40

    (39) expression -> string .

    '               reduce using rule 39 (expression -> string .)
    +               reduce using rule 39 (expression -> string .)
    -               reduce using rule 39 (expression -> string .)
    *               reduce using rule 39 (expression -> string .)
    /               reduce using rule 39 (expression -> string .)
    DOTADD          reduce using rule 39 (expression -> string .)
    DOTSUB          reduce using rule 39 (expression -> string .)
    DOTMUL          reduce using rule 39 (expression -> string .)
    DOTDIV          reduce using rule 39 (expression -> string .)
    <               reduce using rule 39 (expression -> string .)
    >               reduce using rule 39 (expression -> string .)
    LESSEQ          reduce using rule 39 (expression -> string .)
    MOREEQ          reduce using rule 39 (expression -> string .)
    EQUAL           reduce using rule 39 (expression -> string .)
    NOTEQUAL        reduce using rule 39 (expression -> string .)
    ;               reduce using rule 39 (expression -> string .)
    {               reduce using rule 39 (expression -> string .)
    IF              reduce using rule 39 (expression -> string .)
    RETURN          reduce using rule 39 (expression -> string .)
    BREAK           reduce using rule 39 (expression -> string .)
    CONTINUE        reduce using rule 39 (expression -> string .)
    FOR             reduce using rule 39 (expression -> string .)
    WHILE           reduce using rule 39 (expression -> string .)
    PRINT           reduce using rule 39 (expression -> string .)
    ID              reduce using rule 39 (expression -> string .)
    $end            reduce using rule 39 (expression -> string .)
    }               reduce using rule 39 (expression -> string .)
    ELSE            reduce using rule 39 (expression -> string .)
    ,               reduce using rule 39 (expression -> string .)
    )               reduce using rule 39 (expression -> string .)
    ]               reduce using rule 39 (expression -> string .)
    :               reduce using rule 39 (expression -> string .)


state 41

    (52) expression -> - . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 80
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 42

    (67) expression -> matrix .

    '               reduce using rule 67 (expression -> matrix .)
    +               reduce using rule 67 (expression -> matrix .)
    -               reduce using rule 67 (expression -> matrix .)
    *               reduce using rule 67 (expression -> matrix .)
    /               reduce using rule 67 (expression -> matrix .)
    DOTADD          reduce using rule 67 (expression -> matrix .)
    DOTSUB          reduce using rule 67 (expression -> matrix .)
    DOTMUL          reduce using rule 67 (expression -> matrix .)
    DOTDIV          reduce using rule 67 (expression -> matrix .)
    <               reduce using rule 67 (expression -> matrix .)
    >               reduce using rule 67 (expression -> matrix .)
    LESSEQ          reduce using rule 67 (expression -> matrix .)
    MOREEQ          reduce using rule 67 (expression -> matrix .)
    EQUAL           reduce using rule 67 (expression -> matrix .)
    NOTEQUAL        reduce using rule 67 (expression -> matrix .)
    ;               reduce using rule 67 (expression -> matrix .)
    {               reduce using rule 67 (expression -> matrix .)
    IF              reduce using rule 67 (expression -> matrix .)
    RETURN          reduce using rule 67 (expression -> matrix .)
    BREAK           reduce using rule 67 (expression -> matrix .)
    CONTINUE        reduce using rule 67 (expression -> matrix .)
    FOR             reduce using rule 67 (expression -> matrix .)
    WHILE           reduce using rule 67 (expression -> matrix .)
    PRINT           reduce using rule 67 (expression -> matrix .)
    ID              reduce using rule 67 (expression -> matrix .)
    $end            reduce using rule 67 (expression -> matrix .)
    }               reduce using rule 67 (expression -> matrix .)
    ELSE            reduce using rule 67 (expression -> matrix .)
    ,               reduce using rule 67 (expression -> matrix .)
    )               reduce using rule 67 (expression -> matrix .)
    ]               reduce using rule 67 (expression -> matrix .)
    :               reduce using rule 67 (expression -> matrix .)


state 43

    (73) expression -> matrix_creation . ( mat_func_args )

    (               shift and go to state 81


state 44

    (68) matrix -> [ . matrix ]
    (69) matrix -> [ . sub_string_1 ]
    (70) matrix -> [ . sub_string_1 , matrix ]
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (71) sub_string_1 -> . sub_string_1 , expression
    (72) sub_string_1 -> . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    [               shift and go to state 44
    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    matrix                         shift and go to state 82
    sub_string_1                   shift and go to state 83
    expression                     shift and go to state 84
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 45

    (40) int -> INTNUM .

    '               reduce using rule 40 (int -> INTNUM .)
    +               reduce using rule 40 (int -> INTNUM .)
    -               reduce using rule 40 (int -> INTNUM .)
    *               reduce using rule 40 (int -> INTNUM .)
    /               reduce using rule 40 (int -> INTNUM .)
    DOTADD          reduce using rule 40 (int -> INTNUM .)
    DOTSUB          reduce using rule 40 (int -> INTNUM .)
    DOTMUL          reduce using rule 40 (int -> INTNUM .)
    DOTDIV          reduce using rule 40 (int -> INTNUM .)
    <               reduce using rule 40 (int -> INTNUM .)
    >               reduce using rule 40 (int -> INTNUM .)
    LESSEQ          reduce using rule 40 (int -> INTNUM .)
    MOREEQ          reduce using rule 40 (int -> INTNUM .)
    EQUAL           reduce using rule 40 (int -> INTNUM .)
    NOTEQUAL        reduce using rule 40 (int -> INTNUM .)
    ;               reduce using rule 40 (int -> INTNUM .)
    {               reduce using rule 40 (int -> INTNUM .)
    IF              reduce using rule 40 (int -> INTNUM .)
    RETURN          reduce using rule 40 (int -> INTNUM .)
    BREAK           reduce using rule 40 (int -> INTNUM .)
    CONTINUE        reduce using rule 40 (int -> INTNUM .)
    FOR             reduce using rule 40 (int -> INTNUM .)
    WHILE           reduce using rule 40 (int -> INTNUM .)
    PRINT           reduce using rule 40 (int -> INTNUM .)
    ID              reduce using rule 40 (int -> INTNUM .)
    $end            reduce using rule 40 (int -> INTNUM .)
    }               reduce using rule 40 (int -> INTNUM .)
    ELSE            reduce using rule 40 (int -> INTNUM .)
    ,               reduce using rule 40 (int -> INTNUM .)
    )               reduce using rule 40 (int -> INTNUM .)
    ]               reduce using rule 40 (int -> INTNUM .)
    :               reduce using rule 40 (int -> INTNUM .)


state 46

    (41) float -> FLOATNUM .

    '               reduce using rule 41 (float -> FLOATNUM .)
    +               reduce using rule 41 (float -> FLOATNUM .)
    -               reduce using rule 41 (float -> FLOATNUM .)
    *               reduce using rule 41 (float -> FLOATNUM .)
    /               reduce using rule 41 (float -> FLOATNUM .)
    DOTADD          reduce using rule 41 (float -> FLOATNUM .)
    DOTSUB          reduce using rule 41 (float -> FLOATNUM .)
    DOTMUL          reduce using rule 41 (float -> FLOATNUM .)
    DOTDIV          reduce using rule 41 (float -> FLOATNUM .)
    <               reduce using rule 41 (float -> FLOATNUM .)
    >               reduce using rule 41 (float -> FLOATNUM .)
    LESSEQ          reduce using rule 41 (float -> FLOATNUM .)
    MOREEQ          reduce using rule 41 (float -> FLOATNUM .)
    EQUAL           reduce using rule 41 (float -> FLOATNUM .)
    NOTEQUAL        reduce using rule 41 (float -> FLOATNUM .)
    ;               reduce using rule 41 (float -> FLOATNUM .)
    {               reduce using rule 41 (float -> FLOATNUM .)
    IF              reduce using rule 41 (float -> FLOATNUM .)
    RETURN          reduce using rule 41 (float -> FLOATNUM .)
    BREAK           reduce using rule 41 (float -> FLOATNUM .)
    CONTINUE        reduce using rule 41 (float -> FLOATNUM .)
    FOR             reduce using rule 41 (float -> FLOATNUM .)
    WHILE           reduce using rule 41 (float -> FLOATNUM .)
    PRINT           reduce using rule 41 (float -> FLOATNUM .)
    ID              reduce using rule 41 (float -> FLOATNUM .)
    $end            reduce using rule 41 (float -> FLOATNUM .)
    }               reduce using rule 41 (float -> FLOATNUM .)
    ELSE            reduce using rule 41 (float -> FLOATNUM .)
    ,               reduce using rule 41 (float -> FLOATNUM .)
    )               reduce using rule 41 (float -> FLOATNUM .)
    ]               reduce using rule 41 (float -> FLOATNUM .)
    :               reduce using rule 41 (float -> FLOATNUM .)


state 47

    (42) string -> STRING .

    '               reduce using rule 42 (string -> STRING .)
    +               reduce using rule 42 (string -> STRING .)
    -               reduce using rule 42 (string -> STRING .)
    *               reduce using rule 42 (string -> STRING .)
    /               reduce using rule 42 (string -> STRING .)
    DOTADD          reduce using rule 42 (string -> STRING .)
    DOTSUB          reduce using rule 42 (string -> STRING .)
    DOTMUL          reduce using rule 42 (string -> STRING .)
    DOTDIV          reduce using rule 42 (string -> STRING .)
    <               reduce using rule 42 (string -> STRING .)
    >               reduce using rule 42 (string -> STRING .)
    LESSEQ          reduce using rule 42 (string -> STRING .)
    MOREEQ          reduce using rule 42 (string -> STRING .)
    EQUAL           reduce using rule 42 (string -> STRING .)
    NOTEQUAL        reduce using rule 42 (string -> STRING .)
    ;               reduce using rule 42 (string -> STRING .)
    {               reduce using rule 42 (string -> STRING .)
    IF              reduce using rule 42 (string -> STRING .)
    RETURN          reduce using rule 42 (string -> STRING .)
    BREAK           reduce using rule 42 (string -> STRING .)
    CONTINUE        reduce using rule 42 (string -> STRING .)
    FOR             reduce using rule 42 (string -> STRING .)
    WHILE           reduce using rule 42 (string -> STRING .)
    PRINT           reduce using rule 42 (string -> STRING .)
    ID              reduce using rule 42 (string -> STRING .)
    $end            reduce using rule 42 (string -> STRING .)
    }               reduce using rule 42 (string -> STRING .)
    ELSE            reduce using rule 42 (string -> STRING .)
    ,               reduce using rule 42 (string -> STRING .)
    )               reduce using rule 42 (string -> STRING .)
    ]               reduce using rule 42 (string -> STRING .)
    :               reduce using rule 42 (string -> STRING .)


state 48

    (76) matrix_creation -> ZEROS .

    (               reduce using rule 76 (matrix_creation -> ZEROS .)


state 49

    (77) matrix_creation -> ONES .

    (               reduce using rule 77 (matrix_creation -> ONES .)


state 50

    (78) matrix_creation -> EYE .

    (               reduce using rule 78 (matrix_creation -> EYE .)


state 51

    (28) for_loop -> FOR id . = expression : expression instruction

    =               shift and go to state 85


state 52

    (45) var -> id [ . mat_func_args ]
    (74) mat_func_args -> . mat_func_args , expression
    (75) mat_func_args -> . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    id                             shift and go to state 19
    mat_func_args                  shift and go to state 86
    expression                     shift and go to state 87
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43

state 53

    (27) while_loop -> WHILE ( . expression ) instruction
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 88
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 54

    (46) assignment -> var = . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    var                            shift and go to state 36
    expression                     shift and go to state 89
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 55

    (47) assignment -> var ADDASSIGN . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    var                            shift and go to state 36
    expression                     shift and go to state 90
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 56

    (48) assignment -> var SUBASSIGN . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    var                            shift and go to state 36
    expression                     shift and go to state 91
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 57

    (49) assignment -> var MULASSIGN . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    var                            shift and go to state 36
    expression                     shift and go to state 92
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 58

    (50) assignment -> var DIVASSIGN . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    var                            shift and go to state 36
    expression                     shift and go to state 93
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 59

    (31) print -> PRINT ( . list_for_print )
    (36) expression -> ( . expression )
    (33) list_for_print -> . expression , list_for_print
    (34) list_for_print -> . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    list_for_print                 shift and go to state 94
    expression                     shift and go to state 95
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 60

    (32) print -> PRINT list_for_print .

    ;               reduce using rule 32 (print -> PRINT list_for_print .)
    {               reduce using rule 32 (print -> PRINT list_for_print .)
    IF              reduce using rule 32 (print -> PRINT list_for_print .)
    RETURN          reduce using rule 32 (print -> PRINT list_for_print .)
    BREAK           reduce using rule 32 (print -> PRINT list_for_print .)
    CONTINUE        reduce using rule 32 (print -> PRINT list_for_print .)
    FOR             reduce using rule 32 (print -> PRINT list_for_print .)
    WHILE           reduce using rule 32 (print -> PRINT list_for_print .)
    PRINT           reduce using rule 32 (print -> PRINT list_for_print .)
    ID              reduce using rule 32 (print -> PRINT list_for_print .)
    $end            reduce using rule 32 (print -> PRINT list_for_print .)
    }               reduce using rule 32 (print -> PRINT list_for_print .)
    ELSE            reduce using rule 32 (print -> PRINT list_for_print .)


state 61

    (33) list_for_print -> expression . , list_for_print
    (34) list_for_print -> expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ,               shift and go to state 96
    ;               reduce using rule 34 (list_for_print -> expression .)
    {               reduce using rule 34 (list_for_print -> expression .)
    IF              reduce using rule 34 (list_for_print -> expression .)
    RETURN          reduce using rule 34 (list_for_print -> expression .)
    BREAK           reduce using rule 34 (list_for_print -> expression .)
    CONTINUE        reduce using rule 34 (list_for_print -> expression .)
    FOR             reduce using rule 34 (list_for_print -> expression .)
    WHILE           reduce using rule 34 (list_for_print -> expression .)
    PRINT           reduce using rule 34 (list_for_print -> expression .)
    ID              reduce using rule 34 (list_for_print -> expression .)
    $end            reduce using rule 34 (list_for_print -> expression .)
    }               reduce using rule 34 (list_for_print -> expression .)
    ELSE            reduce using rule 34 (list_for_print -> expression .)
    )               reduce using rule 34 (list_for_print -> expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 62

    (6) instruction -> { instructions } .

    {               reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)
    ;               reduce using rule 6 (instruction -> { instructions } .)


state 63

    (23) if -> IF ( expression . ) instruction
    (24) if -> IF ( expression . ) instruction ELSE instruction
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    )               shift and go to state 97
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 64

    (51) expression -> expression ' .

    '               reduce using rule 51 (expression -> expression ' .)
    +               reduce using rule 51 (expression -> expression ' .)
    -               reduce using rule 51 (expression -> expression ' .)
    *               reduce using rule 51 (expression -> expression ' .)
    /               reduce using rule 51 (expression -> expression ' .)
    DOTADD          reduce using rule 51 (expression -> expression ' .)
    DOTSUB          reduce using rule 51 (expression -> expression ' .)
    DOTMUL          reduce using rule 51 (expression -> expression ' .)
    DOTDIV          reduce using rule 51 (expression -> expression ' .)
    <               reduce using rule 51 (expression -> expression ' .)
    >               reduce using rule 51 (expression -> expression ' .)
    LESSEQ          reduce using rule 51 (expression -> expression ' .)
    MOREEQ          reduce using rule 51 (expression -> expression ' .)
    EQUAL           reduce using rule 51 (expression -> expression ' .)
    NOTEQUAL        reduce using rule 51 (expression -> expression ' .)
    ;               reduce using rule 51 (expression -> expression ' .)
    {               reduce using rule 51 (expression -> expression ' .)
    IF              reduce using rule 51 (expression -> expression ' .)
    RETURN          reduce using rule 51 (expression -> expression ' .)
    BREAK           reduce using rule 51 (expression -> expression ' .)
    CONTINUE        reduce using rule 51 (expression -> expression ' .)
    FOR             reduce using rule 51 (expression -> expression ' .)
    WHILE           reduce using rule 51 (expression -> expression ' .)
    PRINT           reduce using rule 51 (expression -> expression ' .)
    ID              reduce using rule 51 (expression -> expression ' .)
    $end            reduce using rule 51 (expression -> expression ' .)
    }               reduce using rule 51 (expression -> expression ' .)
    ELSE            reduce using rule 51 (expression -> expression ' .)
    ,               reduce using rule 51 (expression -> expression ' .)
    )               reduce using rule 51 (expression -> expression ' .)
    ]               reduce using rule 51 (expression -> expression ' .)
    :               reduce using rule 51 (expression -> expression ' .)


state 65

    (53) expression -> expression + . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 98
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 66

    (54) expression -> expression - . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 99
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 67

    (55) expression -> expression * . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 100
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 68

    (56) expression -> expression / . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 101
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 69

    (57) expression -> expression DOTADD . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 102
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 70

    (58) expression -> expression DOTSUB . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 103
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 71

    (59) expression -> expression DOTMUL . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 104
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 72

    (60) expression -> expression DOTDIV . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 105
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 73

    (61) expression -> expression < . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 106
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 74

    (62) expression -> expression > . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 107
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 75

    (63) expression -> expression LESSEQ . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 108
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 76

    (64) expression -> expression MOREEQ . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 109
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 77

    (65) expression -> expression EQUAL . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 110
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 78

    (66) expression -> expression NOTEQUAL . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 111
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 79

    (36) expression -> ( expression . )
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    )               shift and go to state 112
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 80

    (52) expression -> - expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    '               reduce using rule 52 (expression -> - expression .)
    +               reduce using rule 52 (expression -> - expression .)
    -               reduce using rule 52 (expression -> - expression .)
    *               reduce using rule 52 (expression -> - expression .)
    /               reduce using rule 52 (expression -> - expression .)
    DOTADD          reduce using rule 52 (expression -> - expression .)
    DOTSUB          reduce using rule 52 (expression -> - expression .)
    DOTMUL          reduce using rule 52 (expression -> - expression .)
    DOTDIV          reduce using rule 52 (expression -> - expression .)
    <               reduce using rule 52 (expression -> - expression .)
    >               reduce using rule 52 (expression -> - expression .)
    LESSEQ          reduce using rule 52 (expression -> - expression .)
    MOREEQ          reduce using rule 52 (expression -> - expression .)
    EQUAL           reduce using rule 52 (expression -> - expression .)
    NOTEQUAL        reduce using rule 52 (expression -> - expression .)
    ;               reduce using rule 52 (expression -> - expression .)
    {               reduce using rule 52 (expression -> - expression .)
    IF              reduce using rule 52 (expression -> - expression .)
    RETURN          reduce using rule 52 (expression -> - expression .)
    BREAK           reduce using rule 52 (expression -> - expression .)
    CONTINUE        reduce using rule 52 (expression -> - expression .)
    FOR             reduce using rule 52 (expression -> - expression .)
    WHILE           reduce using rule 52 (expression -> - expression .)
    PRINT           reduce using rule 52 (expression -> - expression .)
    ID              reduce using rule 52 (expression -> - expression .)
    $end            reduce using rule 52 (expression -> - expression .)
    }               reduce using rule 52 (expression -> - expression .)
    ELSE            reduce using rule 52 (expression -> - expression .)
    ,               reduce using rule 52 (expression -> - expression .)
    )               reduce using rule 52 (expression -> - expression .)
    ]               reduce using rule 52 (expression -> - expression .)
    :               reduce using rule 52 (expression -> - expression .)

  ! '               [ shift and go to state 64 ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 67 ]
  ! /               [ shift and go to state 68 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! DOTMUL          [ shift and go to state 71 ]
  ! DOTDIV          [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 81

    (73) expression -> matrix_creation ( . mat_func_args )
    (74) mat_func_args -> . mat_func_args , expression
    (75) mat_func_args -> . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    matrix_creation                shift and go to state 43
    mat_func_args                  shift and go to state 113
    expression                     shift and go to state 87
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    id                             shift and go to state 19

state 82

    (68) matrix -> [ matrix . ]
    (67) expression -> matrix .

  ! shift/reduce conflict for ] resolved as shift
    ]               shift and go to state 114
    '               reduce using rule 67 (expression -> matrix .)
    +               reduce using rule 67 (expression -> matrix .)
    -               reduce using rule 67 (expression -> matrix .)
    *               reduce using rule 67 (expression -> matrix .)
    /               reduce using rule 67 (expression -> matrix .)
    DOTADD          reduce using rule 67 (expression -> matrix .)
    DOTSUB          reduce using rule 67 (expression -> matrix .)
    DOTMUL          reduce using rule 67 (expression -> matrix .)
    DOTDIV          reduce using rule 67 (expression -> matrix .)
    <               reduce using rule 67 (expression -> matrix .)
    >               reduce using rule 67 (expression -> matrix .)
    LESSEQ          reduce using rule 67 (expression -> matrix .)
    MOREEQ          reduce using rule 67 (expression -> matrix .)
    EQUAL           reduce using rule 67 (expression -> matrix .)
    NOTEQUAL        reduce using rule 67 (expression -> matrix .)
    ,               reduce using rule 67 (expression -> matrix .)

  ! ]               [ reduce using rule 67 (expression -> matrix .) ]


state 83

    (69) matrix -> [ sub_string_1 . ]
    (70) matrix -> [ sub_string_1 . , matrix ]
    (71) sub_string_1 -> sub_string_1 . , expression

    ]               shift and go to state 115
    ,               shift and go to state 116


state 84

    (72) sub_string_1 -> expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ]               reduce using rule 72 (sub_string_1 -> expression .)
    ,               reduce using rule 72 (sub_string_1 -> expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 85

    (28) for_loop -> FOR id = . expression : expression instruction
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    id                             shift and go to state 19
    expression                     shift and go to state 117
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43

state 86

    (45) var -> id [ mat_func_args . ]
    (74) mat_func_args -> mat_func_args . , expression

    ]               shift and go to state 118
    ,               shift and go to state 119


state 87

    (75) mat_func_args -> expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ]               reduce using rule 75 (mat_func_args -> expression .)
    ,               reduce using rule 75 (mat_func_args -> expression .)
    )               reduce using rule 75 (mat_func_args -> expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 88

    (27) while_loop -> WHILE ( expression . ) instruction
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    )               shift and go to state 120
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 89

    (46) assignment -> var = expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ;               reduce using rule 46 (assignment -> var = expression .)
    {               reduce using rule 46 (assignment -> var = expression .)
    IF              reduce using rule 46 (assignment -> var = expression .)
    RETURN          reduce using rule 46 (assignment -> var = expression .)
    BREAK           reduce using rule 46 (assignment -> var = expression .)
    CONTINUE        reduce using rule 46 (assignment -> var = expression .)
    FOR             reduce using rule 46 (assignment -> var = expression .)
    WHILE           reduce using rule 46 (assignment -> var = expression .)
    PRINT           reduce using rule 46 (assignment -> var = expression .)
    ID              reduce using rule 46 (assignment -> var = expression .)
    $end            reduce using rule 46 (assignment -> var = expression .)
    }               reduce using rule 46 (assignment -> var = expression .)
    ELSE            reduce using rule 46 (assignment -> var = expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 90

    (47) assignment -> var ADDASSIGN expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ;               reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    {               reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    IF              reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    RETURN          reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    BREAK           reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    CONTINUE        reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    FOR             reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    WHILE           reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    PRINT           reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    ID              reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    $end            reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    }               reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    ELSE            reduce using rule 47 (assignment -> var ADDASSIGN expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 91

    (48) assignment -> var SUBASSIGN expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ;               reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    {               reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    IF              reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    RETURN          reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    BREAK           reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    CONTINUE        reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    FOR             reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    WHILE           reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    PRINT           reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    ID              reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    $end            reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    }               reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    ELSE            reduce using rule 48 (assignment -> var SUBASSIGN expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 92

    (49) assignment -> var MULASSIGN expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ;               reduce using rule 49 (assignment -> var MULASSIGN expression .)
    {               reduce using rule 49 (assignment -> var MULASSIGN expression .)
    IF              reduce using rule 49 (assignment -> var MULASSIGN expression .)
    RETURN          reduce using rule 49 (assignment -> var MULASSIGN expression .)
    BREAK           reduce using rule 49 (assignment -> var MULASSIGN expression .)
    CONTINUE        reduce using rule 49 (assignment -> var MULASSIGN expression .)
    FOR             reduce using rule 49 (assignment -> var MULASSIGN expression .)
    WHILE           reduce using rule 49 (assignment -> var MULASSIGN expression .)
    PRINT           reduce using rule 49 (assignment -> var MULASSIGN expression .)
    ID              reduce using rule 49 (assignment -> var MULASSIGN expression .)
    $end            reduce using rule 49 (assignment -> var MULASSIGN expression .)
    }               reduce using rule 49 (assignment -> var MULASSIGN expression .)
    ELSE            reduce using rule 49 (assignment -> var MULASSIGN expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 93

    (50) assignment -> var DIVASSIGN expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ;               reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    {               reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    IF              reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    RETURN          reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    BREAK           reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    CONTINUE        reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    FOR             reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    WHILE           reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    PRINT           reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    ID              reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    $end            reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    }               reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    ELSE            reduce using rule 50 (assignment -> var DIVASSIGN expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 94

    (31) print -> PRINT ( list_for_print . )

    )               shift and go to state 121


state 95

    (36) expression -> ( expression . )
    (33) list_for_print -> expression . , list_for_print
    (34) list_for_print -> expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 112
    ,               shift and go to state 96
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78

  ! )               [ reduce using rule 34 (list_for_print -> expression .) ]


state 96

    (33) list_for_print -> expression , . list_for_print
    (33) list_for_print -> . expression , list_for_print
    (34) list_for_print -> . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 61
    list_for_print                 shift and go to state 122
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 97

    (23) if -> IF ( expression ) . instruction
    (24) if -> IF ( expression ) . instruction ELSE instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 123
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 98

    (53) expression -> expression + expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 53 (expression -> expression + expression .)
    -               reduce using rule 53 (expression -> expression + expression .)
    DOTADD          reduce using rule 53 (expression -> expression + expression .)
    DOTSUB          reduce using rule 53 (expression -> expression + expression .)
    <               reduce using rule 53 (expression -> expression + expression .)
    >               reduce using rule 53 (expression -> expression + expression .)
    LESSEQ          reduce using rule 53 (expression -> expression + expression .)
    MOREEQ          reduce using rule 53 (expression -> expression + expression .)
    EQUAL           reduce using rule 53 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 53 (expression -> expression + expression .)
    ;               reduce using rule 53 (expression -> expression + expression .)
    {               reduce using rule 53 (expression -> expression + expression .)
    IF              reduce using rule 53 (expression -> expression + expression .)
    RETURN          reduce using rule 53 (expression -> expression + expression .)
    BREAK           reduce using rule 53 (expression -> expression + expression .)
    CONTINUE        reduce using rule 53 (expression -> expression + expression .)
    FOR             reduce using rule 53 (expression -> expression + expression .)
    WHILE           reduce using rule 53 (expression -> expression + expression .)
    PRINT           reduce using rule 53 (expression -> expression + expression .)
    ID              reduce using rule 53 (expression -> expression + expression .)
    $end            reduce using rule 53 (expression -> expression + expression .)
    }               reduce using rule 53 (expression -> expression + expression .)
    ELSE            reduce using rule 53 (expression -> expression + expression .)
    ,               reduce using rule 53 (expression -> expression + expression .)
    )               reduce using rule 53 (expression -> expression + expression .)
    ]               reduce using rule 53 (expression -> expression + expression .)
    :               reduce using rule 53 (expression -> expression + expression .)
    '               shift and go to state 64
    *               shift and go to state 67
    /               shift and go to state 68
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 53 (expression -> expression + expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 53 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 53 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 99

    (54) expression -> expression - expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 54 (expression -> expression - expression .)
    -               reduce using rule 54 (expression -> expression - expression .)
    DOTADD          reduce using rule 54 (expression -> expression - expression .)
    DOTSUB          reduce using rule 54 (expression -> expression - expression .)
    <               reduce using rule 54 (expression -> expression - expression .)
    >               reduce using rule 54 (expression -> expression - expression .)
    LESSEQ          reduce using rule 54 (expression -> expression - expression .)
    MOREEQ          reduce using rule 54 (expression -> expression - expression .)
    EQUAL           reduce using rule 54 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 54 (expression -> expression - expression .)
    ;               reduce using rule 54 (expression -> expression - expression .)
    {               reduce using rule 54 (expression -> expression - expression .)
    IF              reduce using rule 54 (expression -> expression - expression .)
    RETURN          reduce using rule 54 (expression -> expression - expression .)
    BREAK           reduce using rule 54 (expression -> expression - expression .)
    CONTINUE        reduce using rule 54 (expression -> expression - expression .)
    FOR             reduce using rule 54 (expression -> expression - expression .)
    WHILE           reduce using rule 54 (expression -> expression - expression .)
    PRINT           reduce using rule 54 (expression -> expression - expression .)
    ID              reduce using rule 54 (expression -> expression - expression .)
    $end            reduce using rule 54 (expression -> expression - expression .)
    }               reduce using rule 54 (expression -> expression - expression .)
    ELSE            reduce using rule 54 (expression -> expression - expression .)
    ,               reduce using rule 54 (expression -> expression - expression .)
    )               reduce using rule 54 (expression -> expression - expression .)
    ]               reduce using rule 54 (expression -> expression - expression .)
    :               reduce using rule 54 (expression -> expression - expression .)
    '               shift and go to state 64
    *               shift and go to state 67
    /               shift and go to state 68
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 54 (expression -> expression - expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 100

    (55) expression -> expression * expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 55 (expression -> expression * expression .)
    -               reduce using rule 55 (expression -> expression * expression .)
    *               reduce using rule 55 (expression -> expression * expression .)
    /               reduce using rule 55 (expression -> expression * expression .)
    DOTADD          reduce using rule 55 (expression -> expression * expression .)
    DOTSUB          reduce using rule 55 (expression -> expression * expression .)
    DOTMUL          reduce using rule 55 (expression -> expression * expression .)
    DOTDIV          reduce using rule 55 (expression -> expression * expression .)
    <               reduce using rule 55 (expression -> expression * expression .)
    >               reduce using rule 55 (expression -> expression * expression .)
    LESSEQ          reduce using rule 55 (expression -> expression * expression .)
    MOREEQ          reduce using rule 55 (expression -> expression * expression .)
    EQUAL           reduce using rule 55 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 55 (expression -> expression * expression .)
    ;               reduce using rule 55 (expression -> expression * expression .)
    {               reduce using rule 55 (expression -> expression * expression .)
    IF              reduce using rule 55 (expression -> expression * expression .)
    RETURN          reduce using rule 55 (expression -> expression * expression .)
    BREAK           reduce using rule 55 (expression -> expression * expression .)
    CONTINUE        reduce using rule 55 (expression -> expression * expression .)
    FOR             reduce using rule 55 (expression -> expression * expression .)
    WHILE           reduce using rule 55 (expression -> expression * expression .)
    PRINT           reduce using rule 55 (expression -> expression * expression .)
    ID              reduce using rule 55 (expression -> expression * expression .)
    $end            reduce using rule 55 (expression -> expression * expression .)
    }               reduce using rule 55 (expression -> expression * expression .)
    ELSE            reduce using rule 55 (expression -> expression * expression .)
    ,               reduce using rule 55 (expression -> expression * expression .)
    )               reduce using rule 55 (expression -> expression * expression .)
    ]               reduce using rule 55 (expression -> expression * expression .)
    :               reduce using rule 55 (expression -> expression * expression .)
    '               shift and go to state 64

  ! '               [ reduce using rule 55 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 67 ]
  ! /               [ shift and go to state 68 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! DOTMUL          [ shift and go to state 71 ]
  ! DOTDIV          [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 101

    (56) expression -> expression / expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 56 (expression -> expression / expression .)
    -               reduce using rule 56 (expression -> expression / expression .)
    *               reduce using rule 56 (expression -> expression / expression .)
    /               reduce using rule 56 (expression -> expression / expression .)
    DOTADD          reduce using rule 56 (expression -> expression / expression .)
    DOTSUB          reduce using rule 56 (expression -> expression / expression .)
    DOTMUL          reduce using rule 56 (expression -> expression / expression .)
    DOTDIV          reduce using rule 56 (expression -> expression / expression .)
    <               reduce using rule 56 (expression -> expression / expression .)
    >               reduce using rule 56 (expression -> expression / expression .)
    LESSEQ          reduce using rule 56 (expression -> expression / expression .)
    MOREEQ          reduce using rule 56 (expression -> expression / expression .)
    EQUAL           reduce using rule 56 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 56 (expression -> expression / expression .)
    ;               reduce using rule 56 (expression -> expression / expression .)
    {               reduce using rule 56 (expression -> expression / expression .)
    IF              reduce using rule 56 (expression -> expression / expression .)
    RETURN          reduce using rule 56 (expression -> expression / expression .)
    BREAK           reduce using rule 56 (expression -> expression / expression .)
    CONTINUE        reduce using rule 56 (expression -> expression / expression .)
    FOR             reduce using rule 56 (expression -> expression / expression .)
    WHILE           reduce using rule 56 (expression -> expression / expression .)
    PRINT           reduce using rule 56 (expression -> expression / expression .)
    ID              reduce using rule 56 (expression -> expression / expression .)
    $end            reduce using rule 56 (expression -> expression / expression .)
    }               reduce using rule 56 (expression -> expression / expression .)
    ELSE            reduce using rule 56 (expression -> expression / expression .)
    ,               reduce using rule 56 (expression -> expression / expression .)
    )               reduce using rule 56 (expression -> expression / expression .)
    ]               reduce using rule 56 (expression -> expression / expression .)
    :               reduce using rule 56 (expression -> expression / expression .)
    '               shift and go to state 64

  ! '               [ reduce using rule 56 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 67 ]
  ! /               [ shift and go to state 68 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! DOTMUL          [ shift and go to state 71 ]
  ! DOTDIV          [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 102

    (57) expression -> expression DOTADD expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 57 (expression -> expression DOTADD expression .)
    -               reduce using rule 57 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 57 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 57 (expression -> expression DOTADD expression .)
    <               reduce using rule 57 (expression -> expression DOTADD expression .)
    >               reduce using rule 57 (expression -> expression DOTADD expression .)
    LESSEQ          reduce using rule 57 (expression -> expression DOTADD expression .)
    MOREEQ          reduce using rule 57 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 57 (expression -> expression DOTADD expression .)
    NOTEQUAL        reduce using rule 57 (expression -> expression DOTADD expression .)
    ;               reduce using rule 57 (expression -> expression DOTADD expression .)
    {               reduce using rule 57 (expression -> expression DOTADD expression .)
    IF              reduce using rule 57 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 57 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 57 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 57 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 57 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 57 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 57 (expression -> expression DOTADD expression .)
    ID              reduce using rule 57 (expression -> expression DOTADD expression .)
    $end            reduce using rule 57 (expression -> expression DOTADD expression .)
    }               reduce using rule 57 (expression -> expression DOTADD expression .)
    ELSE            reduce using rule 57 (expression -> expression DOTADD expression .)
    ,               reduce using rule 57 (expression -> expression DOTADD expression .)
    )               reduce using rule 57 (expression -> expression DOTADD expression .)
    ]               reduce using rule 57 (expression -> expression DOTADD expression .)
    :               reduce using rule 57 (expression -> expression DOTADD expression .)
    '               shift and go to state 64
    *               shift and go to state 67
    /               shift and go to state 68
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 103

    (58) expression -> expression DOTSUB expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 58 (expression -> expression DOTSUB expression .)
    -               reduce using rule 58 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 58 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 58 (expression -> expression DOTSUB expression .)
    <               reduce using rule 58 (expression -> expression DOTSUB expression .)
    >               reduce using rule 58 (expression -> expression DOTSUB expression .)
    LESSEQ          reduce using rule 58 (expression -> expression DOTSUB expression .)
    MOREEQ          reduce using rule 58 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 58 (expression -> expression DOTSUB expression .)
    NOTEQUAL        reduce using rule 58 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 58 (expression -> expression DOTSUB expression .)
    {               reduce using rule 58 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 58 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 58 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 58 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 58 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 58 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 58 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 58 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 58 (expression -> expression DOTSUB expression .)
    $end            reduce using rule 58 (expression -> expression DOTSUB expression .)
    }               reduce using rule 58 (expression -> expression DOTSUB expression .)
    ELSE            reduce using rule 58 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 58 (expression -> expression DOTSUB expression .)
    )               reduce using rule 58 (expression -> expression DOTSUB expression .)
    ]               reduce using rule 58 (expression -> expression DOTSUB expression .)
    :               reduce using rule 58 (expression -> expression DOTSUB expression .)
    '               shift and go to state 64
    *               shift and go to state 67
    /               shift and go to state 68
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 104

    (59) expression -> expression DOTMUL expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 59 (expression -> expression DOTMUL expression .)
    -               reduce using rule 59 (expression -> expression DOTMUL expression .)
    *               reduce using rule 59 (expression -> expression DOTMUL expression .)
    /               reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 59 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 59 (expression -> expression DOTMUL expression .)
    <               reduce using rule 59 (expression -> expression DOTMUL expression .)
    >               reduce using rule 59 (expression -> expression DOTMUL expression .)
    LESSEQ          reduce using rule 59 (expression -> expression DOTMUL expression .)
    MOREEQ          reduce using rule 59 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 59 (expression -> expression DOTMUL expression .)
    NOTEQUAL        reduce using rule 59 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 59 (expression -> expression DOTMUL expression .)
    {               reduce using rule 59 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 59 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 59 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 59 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 59 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 59 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 59 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 59 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 59 (expression -> expression DOTMUL expression .)
    $end            reduce using rule 59 (expression -> expression DOTMUL expression .)
    }               reduce using rule 59 (expression -> expression DOTMUL expression .)
    ELSE            reduce using rule 59 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 59 (expression -> expression DOTMUL expression .)
    )               reduce using rule 59 (expression -> expression DOTMUL expression .)
    ]               reduce using rule 59 (expression -> expression DOTMUL expression .)
    :               reduce using rule 59 (expression -> expression DOTMUL expression .)
    '               shift and go to state 64

  ! '               [ reduce using rule 59 (expression -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 67 ]
  ! /               [ shift and go to state 68 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! DOTMUL          [ shift and go to state 71 ]
  ! DOTDIV          [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 105

    (60) expression -> expression DOTDIV expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    +               reduce using rule 60 (expression -> expression DOTDIV expression .)
    -               reduce using rule 60 (expression -> expression DOTDIV expression .)
    *               reduce using rule 60 (expression -> expression DOTDIV expression .)
    /               reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 60 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 60 (expression -> expression DOTDIV expression .)
    <               reduce using rule 60 (expression -> expression DOTDIV expression .)
    >               reduce using rule 60 (expression -> expression DOTDIV expression .)
    LESSEQ          reduce using rule 60 (expression -> expression DOTDIV expression .)
    MOREEQ          reduce using rule 60 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 60 (expression -> expression DOTDIV expression .)
    NOTEQUAL        reduce using rule 60 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 60 (expression -> expression DOTDIV expression .)
    {               reduce using rule 60 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 60 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 60 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 60 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 60 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 60 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 60 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 60 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 60 (expression -> expression DOTDIV expression .)
    $end            reduce using rule 60 (expression -> expression DOTDIV expression .)
    }               reduce using rule 60 (expression -> expression DOTDIV expression .)
    ELSE            reduce using rule 60 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 60 (expression -> expression DOTDIV expression .)
    )               reduce using rule 60 (expression -> expression DOTDIV expression .)
    ]               reduce using rule 60 (expression -> expression DOTDIV expression .)
    :               reduce using rule 60 (expression -> expression DOTDIV expression .)
    '               shift and go to state 64

  ! '               [ reduce using rule 60 (expression -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 65 ]
  ! -               [ shift and go to state 66 ]
  ! *               [ shift and go to state 67 ]
  ! /               [ shift and go to state 68 ]
  ! DOTADD          [ shift and go to state 69 ]
  ! DOTSUB          [ shift and go to state 70 ]
  ! DOTMUL          [ shift and go to state 71 ]
  ! DOTDIV          [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 106

    (61) expression -> expression < expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    <               reduce using rule 61 (expression -> expression < expression .)
    >               reduce using rule 61 (expression -> expression < expression .)
    LESSEQ          reduce using rule 61 (expression -> expression < expression .)
    MOREEQ          reduce using rule 61 (expression -> expression < expression .)
    EQUAL           reduce using rule 61 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 61 (expression -> expression < expression .)
    ;               reduce using rule 61 (expression -> expression < expression .)
    {               reduce using rule 61 (expression -> expression < expression .)
    IF              reduce using rule 61 (expression -> expression < expression .)
    RETURN          reduce using rule 61 (expression -> expression < expression .)
    BREAK           reduce using rule 61 (expression -> expression < expression .)
    CONTINUE        reduce using rule 61 (expression -> expression < expression .)
    FOR             reduce using rule 61 (expression -> expression < expression .)
    WHILE           reduce using rule 61 (expression -> expression < expression .)
    PRINT           reduce using rule 61 (expression -> expression < expression .)
    ID              reduce using rule 61 (expression -> expression < expression .)
    $end            reduce using rule 61 (expression -> expression < expression .)
    }               reduce using rule 61 (expression -> expression < expression .)
    ELSE            reduce using rule 61 (expression -> expression < expression .)
    ,               reduce using rule 61 (expression -> expression < expression .)
    )               reduce using rule 61 (expression -> expression < expression .)
    ]               reduce using rule 61 (expression -> expression < expression .)
    :               reduce using rule 61 (expression -> expression < expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! +               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! DOTADD          [ reduce using rule 61 (expression -> expression < expression .) ]
  ! DOTSUB          [ reduce using rule 61 (expression -> expression < expression .) ]
  ! DOTMUL          [ reduce using rule 61 (expression -> expression < expression .) ]
  ! DOTDIV          [ reduce using rule 61 (expression -> expression < expression .) ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 107

    (62) expression -> expression > expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    <               reduce using rule 62 (expression -> expression > expression .)
    >               reduce using rule 62 (expression -> expression > expression .)
    LESSEQ          reduce using rule 62 (expression -> expression > expression .)
    MOREEQ          reduce using rule 62 (expression -> expression > expression .)
    EQUAL           reduce using rule 62 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 62 (expression -> expression > expression .)
    ;               reduce using rule 62 (expression -> expression > expression .)
    {               reduce using rule 62 (expression -> expression > expression .)
    IF              reduce using rule 62 (expression -> expression > expression .)
    RETURN          reduce using rule 62 (expression -> expression > expression .)
    BREAK           reduce using rule 62 (expression -> expression > expression .)
    CONTINUE        reduce using rule 62 (expression -> expression > expression .)
    FOR             reduce using rule 62 (expression -> expression > expression .)
    WHILE           reduce using rule 62 (expression -> expression > expression .)
    PRINT           reduce using rule 62 (expression -> expression > expression .)
    ID              reduce using rule 62 (expression -> expression > expression .)
    $end            reduce using rule 62 (expression -> expression > expression .)
    }               reduce using rule 62 (expression -> expression > expression .)
    ELSE            reduce using rule 62 (expression -> expression > expression .)
    ,               reduce using rule 62 (expression -> expression > expression .)
    )               reduce using rule 62 (expression -> expression > expression .)
    ]               reduce using rule 62 (expression -> expression > expression .)
    :               reduce using rule 62 (expression -> expression > expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 62 (expression -> expression > expression .) ]
  ! +               [ reduce using rule 62 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression > expression .) ]
  ! DOTADD          [ reduce using rule 62 (expression -> expression > expression .) ]
  ! DOTSUB          [ reduce using rule 62 (expression -> expression > expression .) ]
  ! DOTMUL          [ reduce using rule 62 (expression -> expression > expression .) ]
  ! DOTDIV          [ reduce using rule 62 (expression -> expression > expression .) ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 108

    (63) expression -> expression LESSEQ expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    <               reduce using rule 63 (expression -> expression LESSEQ expression .)
    >               reduce using rule 63 (expression -> expression LESSEQ expression .)
    LESSEQ          reduce using rule 63 (expression -> expression LESSEQ expression .)
    MOREEQ          reduce using rule 63 (expression -> expression LESSEQ expression .)
    EQUAL           reduce using rule 63 (expression -> expression LESSEQ expression .)
    NOTEQUAL        reduce using rule 63 (expression -> expression LESSEQ expression .)
    ;               reduce using rule 63 (expression -> expression LESSEQ expression .)
    {               reduce using rule 63 (expression -> expression LESSEQ expression .)
    IF              reduce using rule 63 (expression -> expression LESSEQ expression .)
    RETURN          reduce using rule 63 (expression -> expression LESSEQ expression .)
    BREAK           reduce using rule 63 (expression -> expression LESSEQ expression .)
    CONTINUE        reduce using rule 63 (expression -> expression LESSEQ expression .)
    FOR             reduce using rule 63 (expression -> expression LESSEQ expression .)
    WHILE           reduce using rule 63 (expression -> expression LESSEQ expression .)
    PRINT           reduce using rule 63 (expression -> expression LESSEQ expression .)
    ID              reduce using rule 63 (expression -> expression LESSEQ expression .)
    $end            reduce using rule 63 (expression -> expression LESSEQ expression .)
    }               reduce using rule 63 (expression -> expression LESSEQ expression .)
    ELSE            reduce using rule 63 (expression -> expression LESSEQ expression .)
    ,               reduce using rule 63 (expression -> expression LESSEQ expression .)
    )               reduce using rule 63 (expression -> expression LESSEQ expression .)
    ]               reduce using rule 63 (expression -> expression LESSEQ expression .)
    :               reduce using rule 63 (expression -> expression LESSEQ expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! +               [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! DOTADD          [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! DOTSUB          [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! DOTMUL          [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! DOTDIV          [ reduce using rule 63 (expression -> expression LESSEQ expression .) ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 109

    (64) expression -> expression MOREEQ expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    <               reduce using rule 64 (expression -> expression MOREEQ expression .)
    >               reduce using rule 64 (expression -> expression MOREEQ expression .)
    LESSEQ          reduce using rule 64 (expression -> expression MOREEQ expression .)
    MOREEQ          reduce using rule 64 (expression -> expression MOREEQ expression .)
    EQUAL           reduce using rule 64 (expression -> expression MOREEQ expression .)
    NOTEQUAL        reduce using rule 64 (expression -> expression MOREEQ expression .)
    ;               reduce using rule 64 (expression -> expression MOREEQ expression .)
    {               reduce using rule 64 (expression -> expression MOREEQ expression .)
    IF              reduce using rule 64 (expression -> expression MOREEQ expression .)
    RETURN          reduce using rule 64 (expression -> expression MOREEQ expression .)
    BREAK           reduce using rule 64 (expression -> expression MOREEQ expression .)
    CONTINUE        reduce using rule 64 (expression -> expression MOREEQ expression .)
    FOR             reduce using rule 64 (expression -> expression MOREEQ expression .)
    WHILE           reduce using rule 64 (expression -> expression MOREEQ expression .)
    PRINT           reduce using rule 64 (expression -> expression MOREEQ expression .)
    ID              reduce using rule 64 (expression -> expression MOREEQ expression .)
    $end            reduce using rule 64 (expression -> expression MOREEQ expression .)
    }               reduce using rule 64 (expression -> expression MOREEQ expression .)
    ELSE            reduce using rule 64 (expression -> expression MOREEQ expression .)
    ,               reduce using rule 64 (expression -> expression MOREEQ expression .)
    )               reduce using rule 64 (expression -> expression MOREEQ expression .)
    ]               reduce using rule 64 (expression -> expression MOREEQ expression .)
    :               reduce using rule 64 (expression -> expression MOREEQ expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! +               [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! -               [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! *               [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! DOTADD          [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! DOTSUB          [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! DOTMUL          [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! DOTDIV          [ reduce using rule 64 (expression -> expression MOREEQ expression .) ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 110

    (65) expression -> expression EQUAL expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    <               reduce using rule 65 (expression -> expression EQUAL expression .)
    >               reduce using rule 65 (expression -> expression EQUAL expression .)
    LESSEQ          reduce using rule 65 (expression -> expression EQUAL expression .)
    MOREEQ          reduce using rule 65 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 65 (expression -> expression EQUAL expression .)
    NOTEQUAL        reduce using rule 65 (expression -> expression EQUAL expression .)
    ;               reduce using rule 65 (expression -> expression EQUAL expression .)
    {               reduce using rule 65 (expression -> expression EQUAL expression .)
    IF              reduce using rule 65 (expression -> expression EQUAL expression .)
    RETURN          reduce using rule 65 (expression -> expression EQUAL expression .)
    BREAK           reduce using rule 65 (expression -> expression EQUAL expression .)
    CONTINUE        reduce using rule 65 (expression -> expression EQUAL expression .)
    FOR             reduce using rule 65 (expression -> expression EQUAL expression .)
    WHILE           reduce using rule 65 (expression -> expression EQUAL expression .)
    PRINT           reduce using rule 65 (expression -> expression EQUAL expression .)
    ID              reduce using rule 65 (expression -> expression EQUAL expression .)
    $end            reduce using rule 65 (expression -> expression EQUAL expression .)
    }               reduce using rule 65 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 65 (expression -> expression EQUAL expression .)
    ,               reduce using rule 65 (expression -> expression EQUAL expression .)
    )               reduce using rule 65 (expression -> expression EQUAL expression .)
    ]               reduce using rule 65 (expression -> expression EQUAL expression .)
    :               reduce using rule 65 (expression -> expression EQUAL expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! +               [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 65 (expression -> expression EQUAL expression .) ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 111

    (66) expression -> expression NOTEQUAL expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    <               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    >               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    LESSEQ          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    MOREEQ          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    EQUAL           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ;               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    {               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    IF              reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    RETURN          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    BREAK           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    CONTINUE        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    FOR             reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    WHILE           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    PRINT           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ID              reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    $end            reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    }               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ELSE            reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ,               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    ]               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    :               reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72

  ! '               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! +               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTADD          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ shift and go to state 73 ]
  ! >               [ shift and go to state 74 ]
  ! LESSEQ          [ shift and go to state 75 ]
  ! MOREEQ          [ shift and go to state 76 ]
  ! EQUAL           [ shift and go to state 77 ]
  ! NOTEQUAL        [ shift and go to state 78 ]


state 112

    (36) expression -> ( expression ) .

    '               reduce using rule 36 (expression -> ( expression ) .)
    +               reduce using rule 36 (expression -> ( expression ) .)
    -               reduce using rule 36 (expression -> ( expression ) .)
    *               reduce using rule 36 (expression -> ( expression ) .)
    /               reduce using rule 36 (expression -> ( expression ) .)
    DOTADD          reduce using rule 36 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 36 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 36 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 36 (expression -> ( expression ) .)
    <               reduce using rule 36 (expression -> ( expression ) .)
    >               reduce using rule 36 (expression -> ( expression ) .)
    LESSEQ          reduce using rule 36 (expression -> ( expression ) .)
    MOREEQ          reduce using rule 36 (expression -> ( expression ) .)
    EQUAL           reduce using rule 36 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 36 (expression -> ( expression ) .)
    ;               reduce using rule 36 (expression -> ( expression ) .)
    {               reduce using rule 36 (expression -> ( expression ) .)
    IF              reduce using rule 36 (expression -> ( expression ) .)
    RETURN          reduce using rule 36 (expression -> ( expression ) .)
    BREAK           reduce using rule 36 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 36 (expression -> ( expression ) .)
    FOR             reduce using rule 36 (expression -> ( expression ) .)
    WHILE           reduce using rule 36 (expression -> ( expression ) .)
    PRINT           reduce using rule 36 (expression -> ( expression ) .)
    ID              reduce using rule 36 (expression -> ( expression ) .)
    $end            reduce using rule 36 (expression -> ( expression ) .)
    }               reduce using rule 36 (expression -> ( expression ) .)
    ELSE            reduce using rule 36 (expression -> ( expression ) .)
    ,               reduce using rule 36 (expression -> ( expression ) .)
    )               reduce using rule 36 (expression -> ( expression ) .)
    ]               reduce using rule 36 (expression -> ( expression ) .)
    :               reduce using rule 36 (expression -> ( expression ) .)


state 113

    (73) expression -> matrix_creation ( mat_func_args . )
    (74) mat_func_args -> mat_func_args . , expression

    )               shift and go to state 124
    ,               shift and go to state 119


state 114

    (68) matrix -> [ matrix ] .

    '               reduce using rule 68 (matrix -> [ matrix ] .)
    +               reduce using rule 68 (matrix -> [ matrix ] .)
    -               reduce using rule 68 (matrix -> [ matrix ] .)
    *               reduce using rule 68 (matrix -> [ matrix ] .)
    /               reduce using rule 68 (matrix -> [ matrix ] .)
    DOTADD          reduce using rule 68 (matrix -> [ matrix ] .)
    DOTSUB          reduce using rule 68 (matrix -> [ matrix ] .)
    DOTMUL          reduce using rule 68 (matrix -> [ matrix ] .)
    DOTDIV          reduce using rule 68 (matrix -> [ matrix ] .)
    <               reduce using rule 68 (matrix -> [ matrix ] .)
    >               reduce using rule 68 (matrix -> [ matrix ] .)
    LESSEQ          reduce using rule 68 (matrix -> [ matrix ] .)
    MOREEQ          reduce using rule 68 (matrix -> [ matrix ] .)
    EQUAL           reduce using rule 68 (matrix -> [ matrix ] .)
    NOTEQUAL        reduce using rule 68 (matrix -> [ matrix ] .)
    ;               reduce using rule 68 (matrix -> [ matrix ] .)
    {               reduce using rule 68 (matrix -> [ matrix ] .)
    IF              reduce using rule 68 (matrix -> [ matrix ] .)
    RETURN          reduce using rule 68 (matrix -> [ matrix ] .)
    BREAK           reduce using rule 68 (matrix -> [ matrix ] .)
    CONTINUE        reduce using rule 68 (matrix -> [ matrix ] .)
    FOR             reduce using rule 68 (matrix -> [ matrix ] .)
    WHILE           reduce using rule 68 (matrix -> [ matrix ] .)
    PRINT           reduce using rule 68 (matrix -> [ matrix ] .)
    ID              reduce using rule 68 (matrix -> [ matrix ] .)
    $end            reduce using rule 68 (matrix -> [ matrix ] .)
    }               reduce using rule 68 (matrix -> [ matrix ] .)
    ELSE            reduce using rule 68 (matrix -> [ matrix ] .)
    ,               reduce using rule 68 (matrix -> [ matrix ] .)
    )               reduce using rule 68 (matrix -> [ matrix ] .)
    ]               reduce using rule 68 (matrix -> [ matrix ] .)
    :               reduce using rule 68 (matrix -> [ matrix ] .)


state 115

    (69) matrix -> [ sub_string_1 ] .

    '               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    +               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    -               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    *               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    /               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    DOTADD          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    DOTSUB          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    DOTMUL          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    DOTDIV          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    <               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    >               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    LESSEQ          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    MOREEQ          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    EQUAL           reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    NOTEQUAL        reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    ;               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    {               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    IF              reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    RETURN          reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    BREAK           reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    CONTINUE        reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    FOR             reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    WHILE           reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    PRINT           reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    ID              reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    $end            reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    }               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    ELSE            reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    ,               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    )               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    ]               reduce using rule 69 (matrix -> [ sub_string_1 ] .)
    :               reduce using rule 69 (matrix -> [ sub_string_1 ] .)


state 116

    (70) matrix -> [ sub_string_1 , . matrix ]
    (71) sub_string_1 -> sub_string_1 , . expression
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    [               shift and go to state 44
    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    matrix                         shift and go to state 125
    expression                     shift and go to state 126
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 117

    (28) for_loop -> FOR id = expression . : expression instruction
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    :               shift and go to state 127
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 118

    (45) var -> id [ mat_func_args ] .

    =               reduce using rule 45 (var -> id [ mat_func_args ] .)
    ADDASSIGN       reduce using rule 45 (var -> id [ mat_func_args ] .)
    SUBASSIGN       reduce using rule 45 (var -> id [ mat_func_args ] .)
    MULASSIGN       reduce using rule 45 (var -> id [ mat_func_args ] .)
    DIVASSIGN       reduce using rule 45 (var -> id [ mat_func_args ] .)
    '               reduce using rule 45 (var -> id [ mat_func_args ] .)
    +               reduce using rule 45 (var -> id [ mat_func_args ] .)
    -               reduce using rule 45 (var -> id [ mat_func_args ] .)
    *               reduce using rule 45 (var -> id [ mat_func_args ] .)
    /               reduce using rule 45 (var -> id [ mat_func_args ] .)
    DOTADD          reduce using rule 45 (var -> id [ mat_func_args ] .)
    DOTSUB          reduce using rule 45 (var -> id [ mat_func_args ] .)
    DOTMUL          reduce using rule 45 (var -> id [ mat_func_args ] .)
    DOTDIV          reduce using rule 45 (var -> id [ mat_func_args ] .)
    <               reduce using rule 45 (var -> id [ mat_func_args ] .)
    >               reduce using rule 45 (var -> id [ mat_func_args ] .)
    LESSEQ          reduce using rule 45 (var -> id [ mat_func_args ] .)
    MOREEQ          reduce using rule 45 (var -> id [ mat_func_args ] .)
    EQUAL           reduce using rule 45 (var -> id [ mat_func_args ] .)
    NOTEQUAL        reduce using rule 45 (var -> id [ mat_func_args ] .)
    ;               reduce using rule 45 (var -> id [ mat_func_args ] .)
    {               reduce using rule 45 (var -> id [ mat_func_args ] .)
    IF              reduce using rule 45 (var -> id [ mat_func_args ] .)
    RETURN          reduce using rule 45 (var -> id [ mat_func_args ] .)
    BREAK           reduce using rule 45 (var -> id [ mat_func_args ] .)
    CONTINUE        reduce using rule 45 (var -> id [ mat_func_args ] .)
    FOR             reduce using rule 45 (var -> id [ mat_func_args ] .)
    WHILE           reduce using rule 45 (var -> id [ mat_func_args ] .)
    PRINT           reduce using rule 45 (var -> id [ mat_func_args ] .)
    ID              reduce using rule 45 (var -> id [ mat_func_args ] .)
    $end            reduce using rule 45 (var -> id [ mat_func_args ] .)
    }               reduce using rule 45 (var -> id [ mat_func_args ] .)
    ELSE            reduce using rule 45 (var -> id [ mat_func_args ] .)
    ,               reduce using rule 45 (var -> id [ mat_func_args ] .)
    )               reduce using rule 45 (var -> id [ mat_func_args ] .)
    ]               reduce using rule 45 (var -> id [ mat_func_args ] .)
    :               reduce using rule 45 (var -> id [ mat_func_args ] .)


state 119

    (74) mat_func_args -> mat_func_args , . expression
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    expression                     shift and go to state 128
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43
    id                             shift and go to state 19

state 120

    (27) while_loop -> WHILE ( expression ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 129
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 121

    (31) print -> PRINT ( list_for_print ) .

    ;               reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    {               reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    IF              reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    RETURN          reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    BREAK           reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    CONTINUE        reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    FOR             reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    WHILE           reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    PRINT           reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    ID              reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    $end            reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    }               reduce using rule 31 (print -> PRINT ( list_for_print ) .)
    ELSE            reduce using rule 31 (print -> PRINT ( list_for_print ) .)


state 122

    (33) list_for_print -> expression , list_for_print .

    ;               reduce using rule 33 (list_for_print -> expression , list_for_print .)
    {               reduce using rule 33 (list_for_print -> expression , list_for_print .)
    IF              reduce using rule 33 (list_for_print -> expression , list_for_print .)
    RETURN          reduce using rule 33 (list_for_print -> expression , list_for_print .)
    BREAK           reduce using rule 33 (list_for_print -> expression , list_for_print .)
    CONTINUE        reduce using rule 33 (list_for_print -> expression , list_for_print .)
    FOR             reduce using rule 33 (list_for_print -> expression , list_for_print .)
    WHILE           reduce using rule 33 (list_for_print -> expression , list_for_print .)
    PRINT           reduce using rule 33 (list_for_print -> expression , list_for_print .)
    ID              reduce using rule 33 (list_for_print -> expression , list_for_print .)
    $end            reduce using rule 33 (list_for_print -> expression , list_for_print .)
    }               reduce using rule 33 (list_for_print -> expression , list_for_print .)
    ELSE            reduce using rule 33 (list_for_print -> expression , list_for_print .)
    )               reduce using rule 33 (list_for_print -> expression , list_for_print .)


state 123

    (23) if -> IF ( expression ) instruction .
    (24) if -> IF ( expression ) instruction . ELSE instruction

    ;               reduce using rule 23 (if -> IF ( expression ) instruction .)
    {               reduce using rule 23 (if -> IF ( expression ) instruction .)
    IF              reduce using rule 23 (if -> IF ( expression ) instruction .)
    RETURN          reduce using rule 23 (if -> IF ( expression ) instruction .)
    BREAK           reduce using rule 23 (if -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 23 (if -> IF ( expression ) instruction .)
    FOR             reduce using rule 23 (if -> IF ( expression ) instruction .)
    WHILE           reduce using rule 23 (if -> IF ( expression ) instruction .)
    PRINT           reduce using rule 23 (if -> IF ( expression ) instruction .)
    ID              reduce using rule 23 (if -> IF ( expression ) instruction .)
    $end            reduce using rule 23 (if -> IF ( expression ) instruction .)
    }               reduce using rule 23 (if -> IF ( expression ) instruction .)
    ELSE            shift and go to state 130

  ! ELSE            [ reduce using rule 23 (if -> IF ( expression ) instruction .) ]


state 124

    (73) expression -> matrix_creation ( mat_func_args ) .

    '               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    +               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    -               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    *               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    /               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    DOTADD          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    DOTSUB          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    DOTMUL          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    DOTDIV          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    <               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    >               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    LESSEQ          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    MOREEQ          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    EQUAL           reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    NOTEQUAL        reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    ;               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    {               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    IF              reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    RETURN          reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    BREAK           reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    CONTINUE        reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    FOR             reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    WHILE           reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    PRINT           reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    ID              reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    $end            reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    }               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    ELSE            reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    ,               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    )               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    ]               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)
    :               reduce using rule 73 (expression -> matrix_creation ( mat_func_args ) .)


state 125

    (70) matrix -> [ sub_string_1 , matrix . ]
    (67) expression -> matrix .

  ! shift/reduce conflict for ] resolved as shift
    ]               shift and go to state 131
    '               reduce using rule 67 (expression -> matrix .)
    +               reduce using rule 67 (expression -> matrix .)
    -               reduce using rule 67 (expression -> matrix .)
    *               reduce using rule 67 (expression -> matrix .)
    /               reduce using rule 67 (expression -> matrix .)
    DOTADD          reduce using rule 67 (expression -> matrix .)
    DOTSUB          reduce using rule 67 (expression -> matrix .)
    DOTMUL          reduce using rule 67 (expression -> matrix .)
    DOTDIV          reduce using rule 67 (expression -> matrix .)
    <               reduce using rule 67 (expression -> matrix .)
    >               reduce using rule 67 (expression -> matrix .)
    LESSEQ          reduce using rule 67 (expression -> matrix .)
    MOREEQ          reduce using rule 67 (expression -> matrix .)
    EQUAL           reduce using rule 67 (expression -> matrix .)
    NOTEQUAL        reduce using rule 67 (expression -> matrix .)
    ,               reduce using rule 67 (expression -> matrix .)

  ! ]               [ reduce using rule 67 (expression -> matrix .) ]


state 126

    (71) sub_string_1 -> sub_string_1 , expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ]               reduce using rule 71 (sub_string_1 -> sub_string_1 , expression .)
    ,               reduce using rule 71 (sub_string_1 -> sub_string_1 , expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 127

    (28) for_loop -> FOR id = expression : . expression instruction
    (35) expression -> . var
    (36) expression -> . ( expression )
    (37) expression -> . int
    (38) expression -> . float
    (39) expression -> . string
    (51) expression -> . expression '
    (52) expression -> . - expression
    (53) expression -> . expression + expression
    (54) expression -> . expression - expression
    (55) expression -> . expression * expression
    (56) expression -> . expression / expression
    (57) expression -> . expression DOTADD expression
    (58) expression -> . expression DOTSUB expression
    (59) expression -> . expression DOTMUL expression
    (60) expression -> . expression DOTDIV expression
    (61) expression -> . expression < expression
    (62) expression -> . expression > expression
    (63) expression -> . expression LESSEQ expression
    (64) expression -> . expression MOREEQ expression
    (65) expression -> . expression EQUAL expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . matrix
    (73) expression -> . matrix_creation ( mat_func_args )
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (40) int -> . INTNUM
    (41) float -> . FLOATNUM
    (42) string -> . STRING
    (68) matrix -> . [ matrix ]
    (69) matrix -> . [ sub_string_1 ]
    (70) matrix -> . [ sub_string_1 , matrix ]
    (76) matrix_creation -> . ZEROS
    (77) matrix_creation -> . ONES
    (78) matrix_creation -> . EYE
    (44) id -> . ID

    (               shift and go to state 37
    -               shift and go to state 41
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STRING          shift and go to state 47
    [               shift and go to state 44
    ZEROS           shift and go to state 48
    ONES            shift and go to state 49
    EYE             shift and go to state 50
    ID              shift and go to state 23

    id                             shift and go to state 19
    expression                     shift and go to state 132
    var                            shift and go to state 36
    int                            shift and go to state 38
    float                          shift and go to state 39
    string                         shift and go to state 40
    matrix                         shift and go to state 42
    matrix_creation                shift and go to state 43

state 128

    (74) mat_func_args -> mat_func_args , expression .
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression

    ]               reduce using rule 74 (mat_func_args -> mat_func_args , expression .)
    ,               reduce using rule 74 (mat_func_args -> mat_func_args , expression .)
    )               reduce using rule 74 (mat_func_args -> mat_func_args , expression .)
    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78


state 129

    (27) while_loop -> WHILE ( expression ) instruction .

    ;               reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    {               reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    IF              reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    ID              reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    $end            reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    }               reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 27 (while_loop -> WHILE ( expression ) instruction .)


state 130

    (24) if -> IF ( expression ) instruction ELSE . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    instruction                    shift and go to state 133
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    id                             shift and go to state 19
    var                            shift and go to state 21

state 131

    (70) matrix -> [ sub_string_1 , matrix ] .

    '               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    +               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    -               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    *               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    /               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    DOTADD          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    DOTSUB          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    DOTMUL          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    DOTDIV          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    <               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    >               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    LESSEQ          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    MOREEQ          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    EQUAL           reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    NOTEQUAL        reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    ;               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    {               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    IF              reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    RETURN          reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    BREAK           reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    CONTINUE        reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    FOR             reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    WHILE           reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    PRINT           reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    ID              reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    $end            reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    }               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    ELSE            reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    ,               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    )               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    ]               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)
    :               reduce using rule 70 (matrix -> [ sub_string_1 , matrix ] .)


state 132

    (28) for_loop -> FOR id = expression : expression . instruction
    (51) expression -> expression . '
    (53) expression -> expression . + expression
    (54) expression -> expression . - expression
    (55) expression -> expression . * expression
    (56) expression -> expression . / expression
    (57) expression -> expression . DOTADD expression
    (58) expression -> expression . DOTSUB expression
    (59) expression -> expression . DOTMUL expression
    (60) expression -> expression . DOTDIV expression
    (61) expression -> expression . < expression
    (62) expression -> expression . > expression
    (63) expression -> expression . LESSEQ expression
    (64) expression -> expression . MOREEQ expression
    (65) expression -> expression . EQUAL expression
    (66) expression -> expression . NOTEQUAL expression
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . if ;
    (9) instruction -> . return
    (10) instruction -> . return ;
    (11) instruction -> . break
    (12) instruction -> . break ;
    (13) instruction -> . continue
    (14) instruction -> . continue ;
    (15) instruction -> . for_loop
    (16) instruction -> . for_loop ;
    (17) instruction -> . while_loop
    (18) instruction -> . while_loop ;
    (19) instruction -> . assignment
    (20) instruction -> . assignment ;
    (21) instruction -> . print
    (22) instruction -> . print ;
    (23) if -> . IF ( expression ) instruction
    (24) if -> . IF ( expression ) instruction ELSE instruction
    (29) return -> . RETURN expression
    (30) return -> . RETURN
    (25) break -> . BREAK
    (26) continue -> . CONTINUE
    (28) for_loop -> . FOR id = expression : expression instruction
    (27) while_loop -> . WHILE ( expression ) instruction
    (46) assignment -> . var = expression
    (47) assignment -> . var ADDASSIGN expression
    (48) assignment -> . var SUBASSIGN expression
    (49) assignment -> . var MULASSIGN expression
    (50) assignment -> . var DIVASSIGN expression
    (31) print -> . PRINT ( list_for_print )
    (32) print -> . PRINT list_for_print
    (43) var -> . id
    (45) var -> . id [ mat_func_args ]
    (44) id -> . ID

    '               shift and go to state 64
    +               shift and go to state 65
    -               shift and go to state 66
    *               shift and go to state 67
    /               shift and go to state 68
    DOTADD          shift and go to state 69
    DOTSUB          shift and go to state 70
    DOTMUL          shift and go to state 71
    DOTDIV          shift and go to state 72
    <               shift and go to state 73
    >               shift and go to state 74
    LESSEQ          shift and go to state 75
    MOREEQ          shift and go to state 76
    EQUAL           shift and go to state 77
    NOTEQUAL        shift and go to state 78
    {               shift and go to state 5
    IF              shift and go to state 14
    RETURN          shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 20
    PRINT           shift and go to state 22
    ID              shift and go to state 23

    id                             shift and go to state 19
    instruction                    shift and go to state 134
    if                             shift and go to state 6
    return                         shift and go to state 7
    break                          shift and go to state 8
    continue                       shift and go to state 9
    for_loop                       shift and go to state 10
    while_loop                     shift and go to state 11
    assignment                     shift and go to state 12
    print                          shift and go to state 13
    var                            shift and go to state 21

state 133

    (24) if -> IF ( expression ) instruction ELSE instruction .

    ;               reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    {               reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 24 (if -> IF ( expression ) instruction ELSE instruction .)


state 134

    (28) for_loop -> FOR id = expression : expression instruction .

    ;               reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    {               reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    IF              reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    RETURN          reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    BREAK           reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    CONTINUE        reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    FOR             reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    WHILE           reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    PRINT           reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    ID              reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    $end            reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    }               reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)
    ELSE            reduce using rule 28 (for_loop -> FOR id = expression : expression instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 6 resolved as shift
WARNING: shift/reduce conflict for ; in state 7 resolved as shift
WARNING: shift/reduce conflict for ; in state 8 resolved as shift
WARNING: shift/reduce conflict for ; in state 9 resolved as shift
WARNING: shift/reduce conflict for ; in state 10 resolved as shift
WARNING: shift/reduce conflict for ; in state 11 resolved as shift
WARNING: shift/reduce conflict for ; in state 12 resolved as shift
WARNING: shift/reduce conflict for ; in state 13 resolved as shift
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
WARNING: shift/reduce conflict for ] in state 82 resolved as shift
WARNING: shift/reduce conflict for ) in state 95 resolved as shift
WARNING: shift/reduce conflict for ] in state 125 resolved as shift
